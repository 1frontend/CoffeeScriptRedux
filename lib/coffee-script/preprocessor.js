// Generated by CoffeeScript 1.3.3
(function() {
  var DEDENT, EventEmitter, INDENT, StringScanner, fs, inspect, ws,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  EventEmitter = require('events').EventEmitter;

  StringScanner = require('cjs-string-scanner');

  inspect = function(o) {
    return console.log((require('util')).inspect(o, false, 9e9, true));
  };

  ws = '\\t\\x0B\\f \\xA0\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000\\uFEFF';

  INDENT = '\uEFEF';

  DEDENT = '\uEFFE';

  this.Preprocessor = (function(_super) {
    var processInput;

    __extends(Preprocessor, _super);

    function Preprocessor() {
      this.base = this.indent = null;
      this.level = 0;
      this.ss = new StringScanner('');
    }

    Preprocessor.prototype.p = function(s) {
      if (s != null) {
        this.emit('data', s);
      }
      return s;
    };

    Preprocessor.prototype.scan = function(r) {
      return this.p(this.ss.scan(r));
    };

    processInput = function(isEnd) {
      return function(data) {
        var b, delta, newLevel;
        if (!isEnd) {
          this.ss.concat(data);
        }
        if ((this.ss.check(RegExp("[" + ws + "]*$"))) != null) {
          if (!isEnd) {
            return;
          }
          this.scan(RegExp("[" + ws + "]*$"));
          this.emit('end');
          return;
        }
        if (this.ss.bol()) {
          this.scan(RegExp("(?:[" + ws + "]*(?:\\n|$))+"));
          if (this.base != null) {
            if ((this.scan(this.base)) == null) {
              throw new Error("inconsistent base indentation");
            }
          } else {
            if ((this.ss.exists(RegExp("[^" + ws + "\\n]"))) == null) {
              return;
            }
            this.scan(RegExp("(?:[" + ws + "]*(\\n|$))+"));
            b = this.scan(RegExp("[" + ws + "]*"));
            this.base = RegExp("" + (b != null ? b : ''));
          }
          if (this.indent != null) {
            if (this.ss.check(RegExp("(?:" + this.indent + "){" + (this.level + 1) + "}[^" + ws + "]"))) {
              this.scan(RegExp("(?:" + this.indent + "){" + (this.level + 1) + "}"));
              ++this.level;
              this.p(INDENT);
            } else if (this.level > 0 && this.ss.check(RegExp("(?:" + this.indent + "){0," + (this.level - 1) + "}[^" + ws + "]"))) {
              newLevel = 0;
              while (this.scan(RegExp("" + this.indent))) {
                ++newLevel;
              }
              delta = this.level - newLevel;
              while (delta--) {
                this.p("" + DEDENT + "\n");
              }
              this.level = newLevel;
            } else if (this.ss.check(RegExp("(?:" + this.indent + "){" + this.level + "}[^" + ws + "]"))) {
              this.scan(RegExp("(?:" + this.indent + "){" + this.level + "}"));
            } else {
              throw new Error("invalid indentation");
            }
          } else if (this.ss.check(RegExp("[" + ws + "]"))) {
            this.indent = this.scan(RegExp("[" + ws + "]+"));
            this.p(INDENT);
            this.level = 1;
          }
        }
        while (this.scan(/[^\n'"\\\\/\#`]+/)) {
          this.ss.scan(RegExp("\\\\\\n[" + ws + "]*"));
          this.scan(/###([^#][\s\S]*?)(?:###[^\n\S]*|(?:###)?$)|^(?:\s*#(?!##[^#]).*)+/);
          this.scan(/("""|''')[\s\S]*?\1/);
          this.scan(/"(?:[^"\\]+|\\.)*"|'(?:[^'\\]+|\\.)*'/);
          this.scan(/^\/{3}([\s\S]+?)\/{3}([imgy]{0,4})(?!\w)/);
          this.scan(/`(?:[^`\\]+|\\.)*`/);
        }
        if (this.scan(/\n/)) {
          if (isEnd) {
            return this.processEnd();
          } else {
            return this.processData('');
          }
        }
      };
    };

    Preprocessor.prototype.processData = processInput(false);

    Preprocessor.prototype.processEnd = processInput(true);

    return Preprocessor;

  })(EventEmitter);

}).call(this);
