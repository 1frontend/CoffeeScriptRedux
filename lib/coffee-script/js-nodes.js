// Generated by CoffeeScript 1.3.3
var ArrayExpression, BinaryExpression, BlockStatement, CallExpression, FunctionExpression, Identifier, Literal, Nodes, Program, SequenceExpression, UnaryExpression, createNode, difference, exports, handleLists, handlePrimitives, node, nodeData, params, _i, _len, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

difference = require('./functional-helpers').difference;

exports = (_ref = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? _ref : this;

createNode = function(type, props) {
  return (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      var i, prop, _i, _len;
      for (i = _i = 0, _len = props.length; _i < _len; i = ++_i) {
        prop = props[i];
        this[prop] = arguments[i];
      }
    }

    _Class.prototype.type = type;

    _Class.prototype.childNodes = props;

    return _Class;

  })(Nodes);
};

this.Nodes = Nodes = (function() {

  function Nodes() {}

  Nodes.prototype.listMembers = [];

  Nodes.prototype["instanceof"] = function() {
    var ctor, ctors, _i, _len;
    ctors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = ctors.length; _i < _len; _i++) {
      ctor = ctors[_i];
      if (this.type === ctor.prototype.type) {
        return true;
      }
    }
    return false;
  };

  Nodes.prototype.toJSON = function() {
    var child, json, p, _i, _len, _ref1, _ref2;
    json = {
      type: this.type
    };
    _ref1 = this.childNodes;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      child = _ref1[_i];
      if (__indexOf.call(this.listMembers, child) >= 0) {
        json[child] = (function() {
          var _j, _len1, _ref2, _results;
          _ref2 = this[child];
          _results = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            p = _ref2[_j];
            _results.push(p.toJSON());
          }
          return _results;
        }).call(this);
      } else {
        json[child] = (_ref2 = this[child]) != null ? _ref2.toJSON() : void 0;
      }
    }
    return json;
  };

  return Nodes;

})();

nodeData = [['AssignmentExpression', ['left', 'right']], ['ArrayExpression', ['elements']], ['BlockStatement', ['body']], ['BinaryExpression', ['operator', 'left', 'right']], ['BreakStatement', ['label']], ['CallExpression', ['callee', 'arguments']], ['CatchClause', ['param', 'body']], ['ConditionalExpression', ['test', 'consequent', 'alternate']], ['ContinueStatement', ['label']], ['DoWhileStatement', ['body', 'test']], ['DebuggerStatement', []], ['EmptyStatement', []], ['ExpressionStatement', ['expression']], ['ForStatement', ['init', 'test', 'update', 'body']], ['ForInStatement', ['left', 'right', 'body']], ['FunctionDeclaration', ['id', 'params', 'body']], ['FunctionExpression', ['id', 'params', 'body']], ['GenSym', ['id']], ['Identifier', ['name']], ['IfStatement', ['test', 'consequent', 'alternate']], ['Literal', ['value']], ['LabeledStatement', ['label', 'body']], ['LogicalExpression', ['left', 'right']], ['MemberExpression', ['object', 'property']], ['NewExpression', ['callee', 'arguments']], ['ObjectExpression', ['properties']], ['Program', ['body']], ['Property', ['key', 'value']], ['ReturnStatement', ['argument']], ['SequenceExpression', ['expressions']], ['SwitchStatement', ['descriminant', 'cases']], ['SwitchCase', ['test', 'consequent']], ['ThisExpression', []], ['ThrowStatement', ['argument']], ['TryStatement', ['block', 'handlers', 'finalizer']], ['UnaryExpression', ['operator', 'argument']], ['UpdateExpression', ['argument']], ['VariableDeclaration', ['declarations']], ['VariableDeclarator', ['id', 'init']], ['WhileStatement', ['test', 'body']], ['WithStatement', ['object', 'body']]];

for (_i = 0, _len = nodeData.length; _i < _len; _i++) {
  _ref1 = nodeData[_i], node = _ref1[0], params = _ref1[1];
  exports[node] = createNode(node, params);
}

Program = exports.Program, BlockStatement = exports.BlockStatement, Literal = exports.Literal, Identifier = exports.Identifier, FunctionExpression = exports.FunctionExpression, CallExpression = exports.CallExpression, SequenceExpression = exports.SequenceExpression, ArrayExpression = exports.ArrayExpression, BinaryExpression = exports.BinaryExpression, UnaryExpression = exports.UnaryExpression;

handlePrimitives = function(ctor, primitives) {
  ctor.prototype.childNodes = difference(ctor.prototype.childNodes, primitives);
  return ctor.prototype.toJSON = function() {
    var json, primitive, _j, _len1;
    json = Nodes.prototype.toJSON.call(this);
    for (_j = 0, _len1 = primitives.length; _j < _len1; _j++) {
      primitive = primitives[_j];
      json[primitive] = this[primitive];
    }
    return json;
  };
};

handlePrimitives(Literal, ['value']);

handlePrimitives(Identifier, ['name']);

handlePrimitives(BinaryExpression, ['operator']);

handlePrimitives(UnaryExpression, ['operator']);

handleLists = function(ctor, listProps) {
  return ctor.prototype.listMembers = listProps;
};

handleLists(Program, ['body']);

handleLists(BlockStatement, ['body']);

handleLists(FunctionExpression, ['params']);

handleLists(CallExpression, ['arguments']);

handleLists(SequenceExpression, ['expressions']);

handleLists(ArrayExpression, ['elements']);
