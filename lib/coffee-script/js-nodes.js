// Generated by CoffeeScript 1.3.3
var Node, createNode, node, nodeData, params, _i, _len, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

createNode = function(type, props) {
  return (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      var i, prop, _i, _len;
      for (i = _i = 0, _len = props.length; _i < _len; i = ++_i) {
        prop = props[i];
        this[prop] = arguments[i];
      }
    }

    _Class.prototype.type = _Class.className = type;

    _Class.prototype.properties = props;

    return _Class;

  })(Node);
};

this.Node = Node = (function() {

  function Node() {}

  Node.prototype.toJSON = function() {
    var obj, prop, _i, _len, _ref;
    obj = {
      type: this.type
    };
    _ref = this.properties;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      prop = _ref[_i];
      obj[prop] = this[prop] instanceof Node ? this[prop].toJSON() : this[prop];
    }
    return obj;
  };

  return Node;

})();

nodeData = [['AssignmentExpression', ['left', 'right']], ['ArrayExpression', ['elements']], ['BlockStatement', ['body']], ['BinaryExpression', ['left', 'right']], ['BreakStatement', ['label']], ['CallExpression', ['callee', 'arguments']], ['CatchClause', ['param', 'body']], ['ConditionalExpression', ['test', 'consequent', 'alternate']], ['ContinueStatement', ['label']], ['DoWhileStatement', ['body', 'test']], ['DebuggerStatement', []], ['EmptyStatement', []], ['ExpressionStatement', ['expression']], ['ForStatement', ['init', 'test', 'update', 'body']], ['ForInStatement', ['left', 'right', 'body']], ['FunctionDeclaration', ['id', 'params', 'body']], ['FunctionExpression', ['id', 'params', 'body']], ['Identifier', []], ['IfStatement', ['test', 'consequent', 'alternate']], ['Literal', []], ['LabeledStatement', ['label', 'body']], ['LogicalExpression', ['left', 'right']], ['MemberExpression', ['object', 'property']], ['NewExpression', ['callee', 'arguments']], ['ObjectExpression', ['properties']], ['Program', ['body']], ['Property', ['key', 'value']], ['ReturnStatement', ['argument']], ['SequenceExpression', ['expressions']], ['SwitchStatement', ['descriminant', 'cases']], ['SwitchCase', ['test', 'consequent']], ['ThisExpression', []], ['ThrowStatement', ['argument']], ['TryStatement', ['block', 'handlers', 'finalizer']], ['UnaryExpression', ['argument']], ['UpdateExpression', ['argument']], ['VariableDeclaration', ['declarations']], ['VariableDeclarator', ['id', 'init']], ['WhileStatement', ['test', 'body']], ['WithStatement', ['object', 'body']]];

for (_i = 0, _len = nodeData.length; _i < _len; _i++) {
  _ref = nodeData[_i], node = _ref[0], params = _ref[1];
  this[node] = createNode(node, params);
}
