(function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "statement": parse_statement,
        "expression": parse_expression,
        "postfixControlFlowOp": parse_postfixControlFlowOp,
        "postfixControlFlowExpression": parse_postfixControlFlowExpression,
        "CompoundAssignmentOperators": parse_CompoundAssignmentOperators,
        "assignmentOp": parse_assignmentOp,
        "compoundAssignmentOp": parse_compoundAssignmentOp,
        "assignmentExpression": parse_assignmentExpression,
        "logicalOrExpression": parse_logicalOrExpression,
        "logicalAndExpression": parse_logicalAndExpression,
        "bitwiseOrExpression": parse_bitwiseOrExpression,
        "bitwiseXorExpression": parse_bitwiseXorExpression,
        "bitwiseAndExpression": parse_bitwiseAndExpression,
        "existentialExpression": parse_existentialExpression,
        "equalityExpression": parse_equalityExpression,
        "relationalExpression": parse_relationalExpression,
        "bitwiseShiftExpression": parse_bitwiseShiftExpression,
        "additiveExpression": parse_additiveExpression,
        "multiplicativeExpression": parse_multiplicativeExpression,
        "prefixExpression": parse_prefixExpression,
        "postfixExpression": parse_postfixExpression,
        "leftHandSideExpression": parse_leftHandSideExpression,
        "newExpression": parse_newExpression,
        "memberExpression": parse_memberExpression,
        "primaryExpression": parse_primaryExpression,
        "MemberAccessOps": parse_MemberAccessOps,
        "memberAccessOp": parse_memberAccessOp,
        "soakedMemberAccessOp": parse_soakedMemberAccessOp,
        "dynamicMemberAccessOp": parse_dynamicMemberAccessOp,
        "soakedDynamicMemberAccessOp": parse_soakedDynamicMemberAccessOp,
        "protoMemberAccessOp": parse_protoMemberAccessOp,
        "dynamicProtoMemberAccessOp": parse_dynamicProtoMemberAccessOp,
        "soakedProtoMemberAccessOp": parse_soakedProtoMemberAccessOp,
        "soakedDynamicProtoMemberAccessOp": parse_soakedDynamicProtoMemberAccessOp,
        "argumentList": parse_argumentList,
        "Literals": parse_Literals,
        "bool": parse_bool,
        "Numbers": parse_Numbers,
        "decimal": parse_decimal,
        "decimalDigit": parse_decimalDigit,
        "hexDigit": parse_hexDigit,
        "octalDigit": parse_octalDigit,
        "bit": parse_bit,
        "unassignable": parse_unassignable,
        "Assignable": parse_Assignable,
        "JSKeywords": parse_JSKeywords,
        "UnusedJSKeywords": parse_UnusedJSKeywords,
        "CSKeywords": parse_CSKeywords,
        "reserved": parse_reserved,
        "identifier": parse_identifier,
        "identifierName": parse_identifierName,
        "identifierStart": parse_identifierStart,
        "identifierPart": parse_identifierPart,
        "UnicodeLetter": parse_UnicodeLetter,
        "UnicodeEscapeSequence": parse_UnicodeEscapeSequence,
        "UnicodeCombiningMark": parse_UnicodeCombiningMark,
        "UnicodeDigit": parse_UnicodeDigit,
        "UnicodeConnectorPunctuation": parse_UnicodeConnectorPunctuation,
        "ZWNJ": parse_ZWNJ,
        "ZWJ": parse_ZWJ,
        "AND": parse_AND,
        "DELETE": parse_DELETE,
        "DO": parse_DO,
        "FALSE": parse_FALSE,
        "FOR": parse_FOR,
        "IF": parse_IF,
        "IN": parse_IN,
        "INSTANCEOF": parse_INSTANCEOF,
        "IS": parse_IS,
        "ISNT": parse_ISNT,
        "NEW": parse_NEW,
        "NO": parse_NO,
        "NOT": parse_NOT,
        "OF": parse_OF,
        "OFF": parse_OFF,
        "ON": parse_ON,
        "OR": parse_OR,
        "OWN": parse_OWN,
        "THIS": parse_THIS,
        "TRUE": parse_TRUE,
        "TYPEOF": parse_TYPEOF,
        "UNLESS": parse_UNLESS,
        "UNTIL": parse_UNTIL,
        "WHILE": parse_WHILE,
        "YES": parse_YES,
        "_": parse__,
        "__": parse___,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse__();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_statement();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_statement();
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, result) { return result; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_statement() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_expression();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 10) {
            result1 = "\n";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, result) { return result; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_expression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_postfixControlFlowExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 59) {
              result3 = ";";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_postfixControlFlowExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 59) {
                result3 = ";";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_postfixControlFlowExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_postfixControlFlowOp() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_IF();
        if (result0 === null) {
          result0 = parse_UNLESS();
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_assignmentExpression();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_WHILE();
          if (result0 === null) {
            result0 = parse_UNTIL();
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_assignmentExpression();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_FOR();
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                result2 = parse_Assignable();
                if (result2 !== null) {
                  result3 = parse__();
                  if (result3 !== null) {
                    pos1 = clone(pos);
                    pos2 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 44) {
                      result4 = ",";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse__();
                      if (result5 !== null) {
                        result6 = parse_Assignable();
                        if (result6 !== null) {
                          result7 = parse__();
                          if (result7 !== null) {
                            result4 = [result4, result5, result6, result7];
                          } else {
                            result4 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result4 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result4 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result4 = null;
                      pos = clone(pos2);
                    }
                    if (result4 !== null) {
                      result4 = (function(offset, line, column, key) { return key; })(pos1.offset, pos1.line, pos1.column, result4[2]);
                    }
                    if (result4 === null) {
                      pos = clone(pos1);
                    }
                    result4 = result4 !== null ? result4 : "";
                    if (result4 !== null) {
                      result5 = parse_IN();
                      if (result5 !== null) {
                        result6 = parse__();
                        if (result6 !== null) {
                          result7 = parse_assignmentExpression();
                          if (result7 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_FOR();
              if (result0 !== null) {
                result1 = parse__();
                if (result1 !== null) {
                  pos1 = clone(pos);
                  result2 = parse_OWN();
                  if (result2 !== null) {
                    result3 = parse__();
                    if (result3 !== null) {
                      result2 = [result2, result3];
                    } else {
                      result2 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    result3 = parse_Assignable();
                    if (result3 !== null) {
                      result4 = parse__();
                      if (result4 !== null) {
                        pos1 = clone(pos);
                        pos2 = clone(pos);
                        if (input.charCodeAt(pos.offset) === 44) {
                          result5 = ",";
                          advance(pos, 1);
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result5 !== null) {
                          result6 = parse__();
                          if (result6 !== null) {
                            result7 = parse_Assignable();
                            if (result7 !== null) {
                              result8 = parse__();
                              if (result8 !== null) {
                                result5 = [result5, result6, result7, result8];
                              } else {
                                result5 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result5 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result5 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result5 = null;
                          pos = clone(pos2);
                        }
                        if (result5 !== null) {
                          result5 = (function(offset, line, column, val) { return val; })(pos1.offset, pos1.line, pos1.column, result5[2]);
                        }
                        if (result5 === null) {
                          pos = clone(pos1);
                        }
                        result5 = result5 !== null ? result5 : "";
                        if (result5 !== null) {
                          result6 = parse_OF();
                          if (result6 !== null) {
                            result7 = parse__();
                            if (result7 !== null) {
                              result8 = parse_assignmentExpression();
                              if (result8 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                              } else {
                                result0 = null;
                                pos = clone(pos0);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos0);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_postfixControlFlowExpression() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_assignmentExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            result3 = parse_postfixControlFlowOp();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_postfixControlFlowOp();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CompoundAssignmentOperators() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 42) {
          result0 = "*";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 47) {
            result0 = "/";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 37) {
              result0 = "%";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 43) {
                result0 = "+";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 45) {
                  result0 = "-";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 2) === "<<") {
                    result0 = "<<";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"<<\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 2) === ">>") {
                      result0 = ">>";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\">>\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 3) === ">>>") {
                        result0 = ">>>";
                        advance(pos, 3);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\">>>\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos.offset) === 38) {
                          result0 = "&";
                          advance(pos, 1);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"&\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos.offset) === 94) {
                            result0 = "^";
                            advance(pos, 1);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"^\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos.offset) === 124) {
                              result0 = "|";
                              advance(pos, 1);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"|\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 3) === "and") {
                                result0 = "and";
                                advance(pos, 3);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"and\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 2) === "or") {
                                  result0 = "or";
                                  advance(pos, 2);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"or\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 2) === "&&") {
                                    result0 = "&&";
                                    advance(pos, 2);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"&&\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos.offset, 2) === "||") {
                                      result0 = "||";
                                      advance(pos, 2);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"||\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.charCodeAt(pos.offset) === 63) {
                                        result0 = "?";
                                        advance(pos, 1);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"?\"");
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_assignmentOp() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_Assignable();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 61) {
              result2 = "=";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result3 = "=";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_logicalOrExpression();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_compoundAssignmentOp() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_Assignable();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_CompoundAssignmentOperators();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_logicalOrExpression();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_assignmentExpression() {
        var result0;
        
        result0 = parse_assignmentOp();
        if (result0 === null) {
          result0 = parse_compoundAssignmentOp();
          if (result0 === null) {
            result0 = parse_logicalOrExpression();
          }
        }
        return result0;
      }
      
      function parse_logicalOrExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        result0 = parse_logicalAndExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            pos2 = clone(pos);
            if (input.substr(pos.offset, 2) === "||") {
              result3 = "||";
              advance(pos, 2);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"||\"");
              }
            }
            if (result3 !== null) {
              pos3 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos3);
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            if (result3 === null) {
              result3 = parse_OR();
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_logicalAndExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              pos2 = clone(pos);
              if (input.substr(pos.offset, 2) === "||") {
                result3 = "||";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"||\"");
                }
              }
              if (result3 !== null) {
                pos3 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos3);
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 === null) {
                result3 = parse_OR();
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_logicalAndExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_logicalAndExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        result0 = parse_bitwiseOrExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            pos2 = clone(pos);
            if (input.substr(pos.offset, 2) === "&&") {
              result3 = "&&";
              advance(pos, 2);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"&&\"");
              }
            }
            if (result3 !== null) {
              pos3 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos3);
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            if (result3 === null) {
              result3 = parse_AND();
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_bitwiseOrExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              pos2 = clone(pos);
              if (input.substr(pos.offset, 2) === "&&") {
                result3 = "&&";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"&&\"");
                }
              }
              if (result3 !== null) {
                pos3 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos3);
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 === null) {
                result3 = parse_AND();
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_bitwiseOrExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwiseOrExpression() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_bitwiseXorExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 124) {
              result3 = "|";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"|\"");
              }
            }
            if (result3 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              if (result4 !== null) {
                result5 = parse__();
                if (result5 !== null) {
                  result6 = parse_bitwiseXorExpression();
                  if (result6 !== null) {
                    result2 = [result2, result3, result4, result5, result6];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 124) {
                result3 = "|";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"|\"");
                }
              }
              if (result3 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_bitwiseXorExpression();
                    if (result6 !== null) {
                      result2 = [result2, result3, result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwiseXorExpression() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_bitwiseAndExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 94) {
              result3 = "^";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"^\"");
              }
            }
            if (result3 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              if (result4 !== null) {
                result5 = parse__();
                if (result5 !== null) {
                  result6 = parse_bitwiseAndExpression();
                  if (result6 !== null) {
                    result2 = [result2, result3, result4, result5, result6];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 94) {
                result3 = "^";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"^\"");
                }
              }
              if (result3 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_bitwiseAndExpression();
                    if (result6 !== null) {
                      result2 = [result2, result3, result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwiseAndExpression() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_existentialExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 38) {
              result3 = "&";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"&\"");
              }
            }
            if (result3 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              if (result4 !== null) {
                result5 = parse__();
                if (result5 !== null) {
                  result6 = parse_existentialExpression();
                  if (result6 !== null) {
                    result2 = [result2, result3, result4, result5, result6];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 38) {
                result3 = "&";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"&\"");
                }
              }
              if (result3 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_existentialExpression();
                    if (result6 !== null) {
                      result2 = [result2, result3, result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_existentialExpression() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_equalityExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 63) {
              result3 = "?";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }
            if (result3 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              if (result4 !== null) {
                result5 = parse__();
                if (result5 !== null) {
                  result6 = parse_equalityExpression();
                  if (result6 !== null) {
                    result2 = [result2, result3, result4, result5, result6];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 63) {
                result3 = "?";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"?\"");
                }
              }
              if (result3 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_equalityExpression();
                    if (result6 !== null) {
                      result2 = [result2, result3, result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_equalityExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_relationalExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.substr(pos.offset, 2) === "==") {
              result3 = "==";
              advance(pos, 2);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"==\"");
              }
            }
            if (result3 === null) {
              result3 = parse_IS();
              if (result3 === null) {
                if (input.substr(pos.offset, 2) === "!=") {
                  result3 = "!=";
                  advance(pos, 2);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"!=\"");
                  }
                }
                if (result3 === null) {
                  result3 = parse_ISNT();
                }
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_relationalExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.substr(pos.offset, 2) === "==") {
                result3 = "==";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"==\"");
                }
              }
              if (result3 === null) {
                result3 = parse_IS();
                if (result3 === null) {
                  if (input.substr(pos.offset, 2) === "!=") {
                    result3 = "!=";
                    advance(pos, 2);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"!=\"");
                    }
                  }
                  if (result3 === null) {
                    result3 = parse_ISNT();
                  }
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_relationalExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_relationalExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_bitwiseShiftExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            pos2 = clone(pos);
            if (/^[<>]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[<>]");
              }
            }
            if (result3 !== null) {
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            if (result3 === null) {
              result3 = parse_INSTANCEOF();
              if (result3 === null) {
                result3 = parse_IN();
                if (result3 === null) {
                  result3 = parse_OF();
                }
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_bitwiseShiftExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              pos2 = clone(pos);
              if (/^[<>]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[<>]");
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 === null) {
                result3 = parse_INSTANCEOF();
                if (result3 === null) {
                  result3 = parse_IN();
                  if (result3 === null) {
                    result3 = parse_OF();
                  }
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_bitwiseShiftExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_bitwiseShiftExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_additiveExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.substr(pos.offset, 2) === "<<") {
              result3 = "<<";
              advance(pos, 2);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"<<\"");
              }
            }
            if (result3 === null) {
              pos2 = clone(pos);
              if (input.substr(pos.offset, 2) === ">>") {
                result3 = ">>";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">>\"");
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 62) {
                  result4 = ">";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_additiveExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.substr(pos.offset, 2) === "<<") {
                result3 = "<<";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"<<\"");
                }
              }
              if (result3 === null) {
                pos2 = clone(pos);
                if (input.substr(pos.offset, 2) === ">>") {
                  result3 = ">>";
                  advance(pos, 2);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">>\"");
                  }
                }
                if (result3 !== null) {
                  if (input.charCodeAt(pos.offset) === 62) {
                    result4 = ">";
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : "";
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_additiveExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_additiveExpression() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        result0 = parse_multiplicativeExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            pos2 = clone(pos);
            if (input.charCodeAt(pos.offset) === 43) {
              result3 = "+";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
            if (result3 !== null) {
              pos3 = clone(pos);
              reportFailures++;
              if (/^[+=]/.test(input.charAt(pos.offset))) {
                result4 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[+=]");
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos3);
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            if (result3 === null) {
              pos2 = clone(pos);
              if (input.charCodeAt(pos.offset) === 45) {
                result3 = "-";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result3 !== null) {
                pos3 = clone(pos);
                reportFailures++;
                if (/^[\-=]/.test(input.charAt(pos.offset))) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\-=]");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos3);
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_multiplicativeExpression();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              pos2 = clone(pos);
              if (input.charCodeAt(pos.offset) === 43) {
                result3 = "+";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (result3 !== null) {
                pos3 = clone(pos);
                reportFailures++;
                if (/^[+=]/.test(input.charAt(pos.offset))) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[+=]");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos3);
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 === null) {
                pos2 = clone(pos);
                if (input.charCodeAt(pos.offset) === 45) {
                  result3 = "-";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result3 !== null) {
                  pos3 = clone(pos);
                  reportFailures++;
                  if (/^[\-=]/.test(input.charAt(pos.offset))) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("[\\-=]");
                    }
                  }
                  reportFailures--;
                  if (result4 === null) {
                    result4 = "";
                  } else {
                    result4 = null;
                    pos = clone(pos3);
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_multiplicativeExpression();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_multiplicativeExpression() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        result0 = parse_prefixExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (/^[*\/%]/.test(input.charAt(pos.offset))) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[*\\/%]");
              }
            }
            if (result3 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 61) {
                result4 = "=";
                advance(pos, 1);
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (result4 === null) {
                result4 = "";
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              if (result4 !== null) {
                result5 = parse__();
                if (result5 !== null) {
                  result6 = parse_prefixExpression();
                  if (result6 !== null) {
                    result2 = [result2, result3, result4, result5, result6];
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (/^[*\/%]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[*\\/%]");
                }
              }
              if (result3 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 61) {
                  result4 = "=";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
                if (result4 !== null) {
                  result5 = parse__();
                  if (result5 !== null) {
                    result6 = parse_prefixExpression();
                    if (result6 !== null) {
                      result2 = [result2, result3, result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_prefixExpression() {
        var result0, result1, result2;
        var pos0;
        
        result0 = parse_postfixExpression();
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 2) === "++") {
            result0 = "++";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"++\"");
            }
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_prefixExpression();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            if (input.substr(pos.offset, 2) === "--") {
              result0 = "--";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"--\"");
              }
            }
            if (result0 !== null) {
              result1 = parse__();
              if (result1 !== null) {
                result2 = parse_prefixExpression();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              if (input.charCodeAt(pos.offset) === 43) {
                result0 = "+";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (result0 !== null) {
                result1 = parse__();
                if (result1 !== null) {
                  result2 = parse_prefixExpression();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                if (input.charCodeAt(pos.offset) === 45) {
                  result0 = "-";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse__();
                  if (result1 !== null) {
                    result2 = parse_prefixExpression();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  if (input.charCodeAt(pos.offset) === 33) {
                    result0 = "!";
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"!\"");
                    }
                  }
                  if (result0 === null) {
                    result0 = parse_NOT();
                  }
                  if (result0 !== null) {
                    result1 = parse__();
                    if (result1 !== null) {
                      result2 = parse_prefixExpression();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 126) {
                      result0 = "~";
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"~\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse__();
                      if (result1 !== null) {
                        result2 = parse_prefixExpression();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      result0 = parse_DO();
                      if (result0 !== null) {
                        result1 = parse__();
                        if (result1 !== null) {
                          result2 = parse_prefixExpression();
                          if (result2 !== null) {
                            result0 = [result0, result1, result2];
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        result0 = parse_TYPEOF();
                        if (result0 !== null) {
                          result1 = parse__();
                          if (result1 !== null) {
                            result2 = parse_prefixExpression();
                            if (result2 !== null) {
                              result0 = [result0, result1, result2];
                            } else {
                              result0 = null;
                              pos = clone(pos0);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          result0 = parse_DELETE();
                          if (result0 !== null) {
                            result1 = parse__();
                            if (result1 !== null) {
                              result2 = parse_prefixExpression();
                              if (result2 !== null) {
                                result0 = [result0, result1, result2];
                              } else {
                                result0 = null;
                                pos = clone(pos0);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos0);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos0);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_postfixExpression() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_leftHandSideExpression();
        if (result0 !== null) {
          result1 = [];
          if (input.charCodeAt(pos.offset) === 63) {
            result2 = "?";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"?\"");
            }
          }
          if (result2 === null) {
            if (input.substr(pos.offset, 4) === "[..]") {
              result2 = "[..]";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"[..]\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "++") {
                result2 = "++";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"++\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos.offset, 2) === "--") {
                  result2 = "--";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"--\"");
                  }
                }
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (input.charCodeAt(pos.offset) === 63) {
              result2 = "?";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 4) === "[..]") {
                result2 = "[..]";
                advance(pos, 4);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[..]\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos.offset, 2) === "++") {
                  result2 = "++";
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"++\"");
                  }
                }
                if (result2 === null) {
                  if (input.substr(pos.offset, 2) === "--") {
                    result2 = "--";
                    advance(pos, 2);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"--\"");
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_leftHandSideExpression() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_memberExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            if (input.charCodeAt(pos.offset) === 40) {
              result3 = "(";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_argumentList();
                result5 = result5 !== null ? result5 : "";
                if (result5 !== null) {
                  result6 = parse__();
                  if (result6 !== null) {
                    if (input.charCodeAt(pos.offset) === 41) {
                      result7 = ")";
                      advance(pos, 1);
                    } else {
                      result7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result7 !== null) {
                      result2 = [result2, result3, result4, result5, result6, result7];
                    } else {
                      result2 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 40) {
                result3 = "(";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_argumentList();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse__();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result7 = ")";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result7 !== null) {
                        result2 = [result2, result3, result4, result5, result6, result7];
                      } else {
                        result2 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_newExpression();
        }
        return result0;
      }
      
      function parse_newExpression() {
        var result0, result1, result2;
        var pos0;
        
        result0 = parse_memberExpression();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_NEW();
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_newExpression();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_memberExpression() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_primaryExpression();
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse__();
          if (result2 !== null) {
            result3 = parse_MemberAccessOps();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_MemberAccessOps();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_primaryExpression() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        result0 = parse_THIS();
        if (result0 === null) {
          result0 = parse_identifier();
          if (result0 === null) {
            result0 = parse_Literals();
            if (result0 === null) {
              pos0 = clone(pos);
              if (input.charCodeAt(pos.offset) === 40) {
                result0 = "(";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result0 !== null) {
                result1 = parse__();
                if (result1 !== null) {
                  result2 = parse_expression();
                  if (result2 !== null) {
                    result3 = parse__();
                    if (result3 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result4 = ")";
                        advance(pos, 1);
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result4 !== null) {
                        result0 = [result0, result1, result2, result3, result4];
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_MemberAccessOps() {
        var result0;
        
        result0 = parse_memberAccessOp();
        if (result0 === null) {
          result0 = parse_soakedMemberAccessOp();
          if (result0 === null) {
            result0 = parse_dynamicMemberAccessOp();
            if (result0 === null) {
              result0 = parse_soakedDynamicMemberAccessOp();
              if (result0 === null) {
                result0 = parse_protoMemberAccessOp();
                if (result0 === null) {
                  result0 = parse_dynamicProtoMemberAccessOp();
                  if (result0 === null) {
                    result0 = parse_soakedProtoMemberAccessOp();
                    if (result0 === null) {
                      result0 = parse_soakedDynamicProtoMemberAccessOp();
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_memberAccessOp() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_identifierName();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_soakedMemberAccessOp() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "?.") {
          result0 = "?.";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"?.\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_identifierName();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_dynamicMemberAccessOp() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_soakedDynamicMemberAccessOp() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "?[") {
          result0 = "?[";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"?[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_protoMemberAccessOp() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "::") {
          result0 = "::";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"::\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_identifierName();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_dynamicProtoMemberAccessOp() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "::[") {
          result0 = "::[";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"::[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_soakedProtoMemberAccessOp() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "?::") {
          result0 = "?::";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"?::\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_identifierName();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_soakedDynamicProtoMemberAccessOp() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "?::[") {
          result0 = "?::[";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"?::[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_expression();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 93) {
              result2 = "]";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_argumentList() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_assignmentExpression();
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = [];
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 44) {
              result3 = ",";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result3 !== null) {
              result4 = parse__();
              if (result4 !== null) {
                result5 = parse_assignmentExpression();
                if (result5 !== null) {
                  result3 = [result3, result4, result5];
                } else {
                  result3 = null;
                  pos = clone(pos1);
                }
              } else {
                result3 = null;
                pos = clone(pos1);
              }
            } else {
              result3 = null;
              pos = clone(pos1);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 44) {
                result3 = ",";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_assignmentExpression();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos1);
                }
              } else {
                result3 = null;
                pos = clone(pos1);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Literals() {
        var result0;
        
        result0 = parse_Numbers();
        if (result0 === null) {
          result0 = parse_bool();
          if (result0 === null) {
            result0 = parse_identifier();
          }
        }
        return result0;
      }
      
      function parse_bool() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_TRUE();
        if (result0 === null) {
          result0 = parse_YES();
          if (result0 === null) {
            result0 = parse_ON();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, match) { return new Nodes.Bool(true).r(match).p(line, column); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_FALSE();
          if (result0 === null) {
            result0 = parse_NO();
            if (result0 === null) {
              result0 = parse_OFF();
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, match) { return new Nodes.Bool(false).r(match).p(line, column); })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_Numbers() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "0b") {
          result0 = "0b";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0b\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_bit();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_bit();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, bs) { return parseInt(bs.join(''), 2); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "0o") {
            result0 = "0o";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"0o\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_octalDigit();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_octalDigit();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, os) { return parseInt(os.join(''), 8); })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 2) === "0x") {
              result0 = "0x";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"0x\"");
              }
            }
            if (result0 !== null) {
              result2 = parse_hexDigit();
              if (result2 !== null) {
                result1 = [];
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_hexDigit();
                }
              } else {
                result1 = null;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, hs) { return parseInt(hs.join(''), 16); })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_decimal();
              if (result0 !== null) {
                if (input.charCodeAt(pos.offset) === 101) {
                  result1 = "e";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"e\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos.offset) === 69) {
                    result1 = "E";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"E\"");
                    }
                  }
                }
                if (result1 !== null) {
                  if (input.charCodeAt(pos.offset) === 43) {
                    result2 = "+";
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result2 === null) {
                    if (input.charCodeAt(pos.offset) === 45) {
                      result2 = "-";
                      advance(pos, 1);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"-\"");
                      }
                    }
                  }
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    result3 = parse_decimal();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, base, sign, exponent) {
                    return base + "e" + sign + exponent
                  })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_decimal();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_decimal() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result1 = parse_decimalDigit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_decimalDigit();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_decimalDigit();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_decimalDigit();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, integral, fractional) {
              return parseInt(integral + fractional, 10);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_decimalDigit() {
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      
      function parse_hexDigit() {
        var result0;
        
        if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        return result0;
      }
      
      function parse_octalDigit() {
        var result0;
        
        if (/^[0-7]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-7]");
          }
        }
        return result0;
      }
      
      function parse_bit() {
        var result0;
        
        if (/^[01]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[01]");
          }
        }
        return result0;
      }
      
      function parse_unassignable() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 9) === "arguments") {
          result0 = "arguments";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"arguments\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 4) === "eval") {
            result0 = "eval";
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"eval\"");
            }
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Assignable() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        result0 = parse_unassignable();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_identifier();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_memberExpression();
        }
        return result0;
      }
      
      function parse_JSKeywords() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 5) === "false") {
            result0 = "false";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 4) === "null") {
              result0 = "null";
              advance(pos, 4);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"null\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 4) === "this") {
                result0 = "this";
                advance(pos, 4);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"this\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 3) === "new") {
                  result0 = "new";
                  advance(pos, 3);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"new\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 6) === "delete") {
                    result0 = "delete";
                    advance(pos, 6);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"delete\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 6) === "typeof") {
                      result0 = "typeof";
                      advance(pos, 6);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"typeof\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 2) === "in") {
                        result0 = "in";
                        advance(pos, 2);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"in\"");
                        }
                      }
                      if (result0 === null) {
                        pos1 = clone(pos);
                        if (input.substr(pos.offset, 10) === "instanceof") {
                          result0 = "instanceof";
                          advance(pos, 10);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"instanceof\"");
                          }
                        }
                        if (result0 !== null) {
                          if (input.substr(pos.offset, 6) === "return") {
                            result1 = "return";
                            advance(pos, 6);
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"return\"");
                            }
                          }
                          if (result1 !== null) {
                            result0 = [result0, result1];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 5) === "throw") {
                            result0 = "throw";
                            advance(pos, 5);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"throw\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 5) === "break") {
                              result0 = "break";
                              advance(pos, 5);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"break\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 8) === "continue") {
                                result0 = "continue";
                                advance(pos, 8);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"continue\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 8) === "debugger") {
                                  result0 = "debugger";
                                  advance(pos, 8);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"debugger\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 2) === "if") {
                                    result0 = "if";
                                    advance(pos, 2);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"if\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos.offset, 4) === "else") {
                                      result0 = "else";
                                      advance(pos, 4);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"else\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos.offset, 6) === "switch") {
                                        result0 = "switch";
                                        advance(pos, 6);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"switch\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos.offset, 3) === "for") {
                                          result0 = "for";
                                          advance(pos, 3);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"for\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos.offset, 5) === "while") {
                                            result0 = "while";
                                            advance(pos, 5);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"while\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos.offset, 2) === "do") {
                                              result0 = "do";
                                              advance(pos, 2);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"do\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos.offset, 3) === "try") {
                                                result0 = "try";
                                                advance(pos, 3);
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"try\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.substr(pos.offset, 5) === "catch") {
                                                  result0 = "catch";
                                                  advance(pos, 5);
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"catch\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.substr(pos.offset, 7) === "finally") {
                                                    result0 = "finally";
                                                    advance(pos, 7);
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"finally\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.substr(pos.offset, 5) === "class") {
                                                      result0 = "class";
                                                      advance(pos, 5);
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"class\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.substr(pos.offset, 7) === "extends") {
                                                        result0 = "extends";
                                                        advance(pos, 7);
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"extends\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.substr(pos.offset, 5) === "super") {
                                                          result0 = "super";
                                                          advance(pos, 5);
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"super\"");
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_UnusedJSKeywords() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "case") {
          result0 = "case";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"case\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 7) === "default") {
            result0 = "default";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"default\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 8) === "function") {
              result0 = "function";
              advance(pos, 8);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"function\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 3) === "var") {
                result0 = "var";
                advance(pos, 3);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"var\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 4) === "void") {
                  result0 = "void";
                  advance(pos, 4);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"void\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 4) === "with") {
                    result0 = "with";
                    advance(pos, 4);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"with\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 5) === "const") {
                      result0 = "const";
                      advance(pos, 5);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"const\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 3) === "let") {
                        result0 = "let";
                        advance(pos, 3);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"let\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 4) === "enum") {
                          result0 = "enum";
                          advance(pos, 4);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"enum\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 6) === "export") {
                            result0 = "export";
                            advance(pos, 6);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"export\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 6) === "import") {
                              result0 = "import";
                              advance(pos, 6);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"import\"");
                              }
                            }
                            if (result0 === null) {
                              pos1 = clone(pos);
                              if (input.substr(pos.offset, 6) === "native") {
                                result0 = "native";
                                advance(pos, 6);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"native\"");
                                }
                              }
                              if (result0 !== null) {
                                if (input.substr(pos.offset, 10) === "implements") {
                                  result1 = "implements";
                                  advance(pos, 10);
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"implements\"");
                                  }
                                }
                                if (result1 !== null) {
                                  result0 = [result0, result1];
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 9) === "interface") {
                                  result0 = "interface";
                                  advance(pos, 9);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"interface\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 3) === "let") {
                                    result0 = "let";
                                    advance(pos, 3);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"let\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos.offset, 7) === "package") {
                                      result0 = "package";
                                      advance(pos, 7);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"package\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos.offset, 7) === "private") {
                                        result0 = "private";
                                        advance(pos, 7);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"private\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos.offset, 9) === "protected") {
                                          result0 = "protected";
                                          advance(pos, 9);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"protected\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos.offset, 6) === "public") {
                                            result0 = "public";
                                            advance(pos, 6);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"public\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos.offset, 6) === "static") {
                                              result0 = "static";
                                              advance(pos, 6);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"static\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos.offset, 5) === "yield") {
                                                result0 = "yield";
                                                advance(pos, 5);
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"yield\"");
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_CSKeywords() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 9) === "undefined") {
          result0 = "undefined";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"undefined\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 4) === "then") {
            result0 = "then";
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"then\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 6) === "unless") {
              result0 = "unless";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"unless\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 5) === "until") {
                result0 = "until";
                advance(pos, 5);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"until\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 4) === "loop") {
                  result0 = "loop";
                  advance(pos, 4);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"loop\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 2) === "of") {
                    result0 = "of";
                    advance(pos, 2);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"of\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "by") {
                      result0 = "by";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"by\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 4) === "when") {
                        result0 = "when";
                        advance(pos, 4);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"when\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 3) === "and") {
                          result0 = "and";
                          advance(pos, 3);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"and\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 2) === "or") {
                            result0 = "or";
                            advance(pos, 2);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"or\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 2) === "is") {
                              result0 = "is";
                              advance(pos, 2);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"is\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 4) === "isnt") {
                                result0 = "isnt";
                                advance(pos, 4);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"isnt\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 3) === "not") {
                                  result0 = "not";
                                  advance(pos, 3);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"not\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 3) === "yes") {
                                    result0 = "yes";
                                    advance(pos, 3);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"yes\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos.offset, 2) === "no") {
                                      result0 = "no";
                                      advance(pos, 2);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"no\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos.offset, 2) === "on") {
                                        result0 = "on";
                                        advance(pos, 2);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"on\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos.offset, 3) === "off") {
                                          result0 = "off";
                                          advance(pos, 3);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"off\"");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_reserved() {
        var result0;
        
        result0 = parse_JSKeywords();
        if (result0 === null) {
          result0 = parse_CSKeywords();
          if (result0 === null) {
            result0 = parse_UnusedJSKeywords();
          }
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        result0 = parse_reserved();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_identifierName();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_identifierName() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_identifierStart();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_identifierPart();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_identifierPart();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_identifierStart() {
        var result0, result1;
        var pos0;
        
        result0 = parse_UnicodeLetter();
        if (result0 === null) {
          if (/^[$_]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[$_]");
            }
          }
          if (result0 === null) {
            pos0 = clone(pos);
            if (input.charCodeAt(pos.offset) === 92) {
              result0 = "\\";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_UnicodeEscapeSequence();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_identifierPart() {
        var result0;
        
        result0 = parse_identifierStart();
        if (result0 === null) {
          result0 = parse_UnicodeCombiningMark();
          if (result0 === null) {
            result0 = parse_UnicodeDigit();
            if (result0 === null) {
              result0 = parse_UnicodeConnectorPunctuation();
              if (result0 === null) {
                result0 = parse_ZWNJ();
                if (result0 === null) {
                  result0 = parse_ZWJ();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_UnicodeLetter() {
        var result0;
        
        if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        return result0;
      }
      
      function parse_UnicodeEscapeSequence() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 117) {
          result0 = "u";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"u\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_hexDigit();
          if (result1 !== null) {
            result2 = parse_hexDigit();
            if (result2 !== null) {
              result3 = parse_hexDigit();
              if (result3 !== null) {
                result4 = parse_hexDigit();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_UnicodeCombiningMark() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 95) {
          result0 = "_";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"_\"");
          }
        }
        return result0;
      }
      
      function parse_UnicodeDigit() {
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      
      function parse_UnicodeConnectorPunctuation() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 36) {
          result0 = "$";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"$\"");
          }
        }
        return result0;
      }
      
      function parse_ZWNJ() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 8204) {
          result0 = "\u200C";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u200C\"");
          }
        }
        return result0;
      }
      
      function parse_ZWJ() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 8205) {
          result0 = "\u200D";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u200D\"");
          }
        }
        return result0;
      }
      
      function parse_AND() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "AND") {
          result0 = "AND";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"AND\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DELETE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 6) === "delete") {
          result0 = "delete";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"delete\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DO() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "do") {
          result0 = "do";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"do\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_FALSE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "false") {
          result0 = "false";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"false\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_FOR() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "for") {
          result0 = "for";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"for\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IF() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "if") {
          result0 = "if";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"if\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IN() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "in") {
          result0 = "in";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"in\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_INSTANCEOF() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 10) === "instanceof") {
          result0 = "instanceof";
          advance(pos, 10);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"instanceof\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_IS() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "is") {
          result0 = "is";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"is\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ISNT() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "isnt") {
          result0 = "isnt";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"isnt\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NEW() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "new") {
          result0 = "new";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"new\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NO() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "no") {
          result0 = "no";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"no\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_NOT() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "not") {
          result0 = "not";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"not\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OF() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "of") {
          result0 = "of";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"of\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OFF() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "off") {
          result0 = "off";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"off\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_ON() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "on") {
          result0 = "on";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"on\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OR() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "or") {
          result0 = "or";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"or\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OWN() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "own") {
          result0 = "own";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"own\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_THIS() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "this") {
          result0 = "this";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"this\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_TRUE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_TYPEOF() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 6) === "typeof") {
          result0 = "typeof";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"typeof\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_UNLESS() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 6) === "unless") {
          result0 = "unless";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"unless\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_UNTIL() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "until") {
          result0 = "until";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"until\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WHILE() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "while") {
          result0 = "while";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"while\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_YES() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 3) === "yes") {
          result0 = "yes";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"yes\"");
          }
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          result1 = parse_identifierPart();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_whitespace();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_whitespace();
        }
        return result0;
      }
      
      function parse___() {
        var result0, result1;
        
        result1 = parse_whitespace();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_whitespace();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_whitespace() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 32) {
          result0 = " ";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
        var Nodes = require("./lib/coffee-script/nodes");
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})()