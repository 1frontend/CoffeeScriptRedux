// Generated by CoffeeScript 1.3.3
var CoffeeScript, Compiler, Optimiser, Parser, Preprocessor, cleanMarkers, cscodegen, escodegen, formatParserError, fs, humanReadable, inspect, packageJSON, path, uglifyjs;

fs = require('fs');

path = require('path');

inspect = require('util').inspect;

Preprocessor = require('./preprocessor').Preprocessor;

Parser = require('./parser');

Optimiser = require('./optimiser').Optimiser;

Compiler = require('./compiler').Compiler;

cscodegen = (function() {
  try {
    return require('cscodegen');
  } catch (_error) {}
})();

escodegen = (function() {
  try {
    return require('escodegen');
  } catch (_error) {}
})();

uglifyjs = (function() {
  try {
    return require('uglify-js');
  } catch (_error) {}
})();

cleanMarkers = function(str) {
  return str.replace(/\uEFEF|\uEFFE\uEFFF/g, '');
};

humanReadable = function(str) {
  return (str.replace(/\uEFEF/g, '(INDENT)')).replace(/\uEFFE\uEFFF/g, '(DEDENT)');
};

formatParserError = function(input, e) {
  var line, message;
  if (e.found != null) {
    line = (input.split('\n'))[e.line - 1];
    e.column = (cleanMarkers(("" + line + "\n").slice(0, e.column + 1 || 9e9))).length - 1;
  }
  message = humanReadable("Syntax error on line " + e.line + ", column " + e.column + ": unexpected " + (e.found != null ? inspect(e.found) : 'end of input'));
  if (e.found != null) {
    message = "" + message + "\n" + (cleanMarkers(line)) + "\n" + ((Array(e.column)).join('-')) + "^";
  }
  return message;
};

CoffeeScript = null;

packageJSON = JSON.parse(fs.readFileSync(path.join(__dirname, '..', '..', 'package.json'), 'utf8'));

module.exports = {
  VERSION: packageJSON.version,
  parse: function(coffee, options) {
    var parsed, _ref;
    if (options == null) {
      options = {};
    }
    if ((_ref = options.optimise) == null) {
      options.optimise = true;
    }
    try {
      parsed = Parser.parse(Preprocessor.processSync(coffee));
      if (options.optimise) {
        return Optimiser.optimise(parsed);
      } else {
        return parsed;
      }
    } catch (e) {
      if (!(e instanceof Parser.SyntaxError)) {
        throw e;
      }
      throw new Error(formatParserError(coffee, e));
    }
  },
  compile: function(csAst, options) {
    return Compiler.compile(csAst, options);
  },
  cs: function(csAst, options) {},
  js: function(jsAst, options) {
    if (escodegen == null) {
      throw new Error('escodegen not found: run `npm install escodegen`');
    }
    return escodegen.generate(jsAst, {
      comment: true,
      format: {
        indent: {
          style: '  ',
          base: 0
        },
        renumber: true,
        hexadecimal: true,
        quotes: 'auto',
        parentheses: false
      }
    });
  }
};

CoffeeScript = module.exports.CoffeeScript = module.exports;

require.extensions['.coffee'] = function(module, filename) {
  var csAst, input, js, jsAst;
  input = fs.readFileSync(filename, 'utf8');
  csAst = CoffeeScript.parse(input);
  jsAst = CoffeeScript.compile(csAst);
  js = CoffeeScript.js(jsAst);
  return module._compile(js, filename);
};
