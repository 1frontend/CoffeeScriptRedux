// Generated by CoffeeScript 1.3.3
(function() {
  var concat, name, node, _ref;

  concat = require('./helpers').concat;

  _ref = require('./nodes');
  for (name in _ref) {
    node = _ref[name];
    global[name in global ? "CS" + name : name] = node;
  }

  this.Optimiser = (function() {
    var defaultRules;

    defaultRules = [
      [
        [Block], function(inScope, ancestors) {
          var canDropLast, changed, newNode, _ref1,
            _this = this;
          canDropLast = (_ref1 = ancestors[0]) != null ? _ref1["instanceof"](Program, Class) : void 0;
          changed = false;
          newNode = new Block(concat((function() {
            var i, s, _i, _len, _ref2, _results;
            _ref2 = _this.statements;
            _results = [];
            for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
              s = _ref2[i];
              if (!((s.mayHaveSideEffects(inScope)) || (!canDropLast && i + 1 === _this.statements.length))) {
                changed = true;
                continue;
              }
              if (s["instanceof"](SeqOp)) {
                changed = true;
                _results.push([s.left, s.right]);
              } else {
                _results.push([s]);
              }
            }
            return _results;
          })()));
          if (!changed) {
            return this;
          }
          newNode = (function() {
            switch (newNode.statements.length) {
              case 0:
                if (canDropLast) {
                  return newNode;
                } else {
                  return (new Undefined).g();
                }
                break;
              case 1:
                return newNode.statements[0];
              default:
                return newNode;
            }
          })();
          return newNode.r(this.raw).p(this.line, this.column);
        }
      ], [
        [SeqOp], function(inScope) {
          if ((this.right["instanceof"](Identifier)) && this.right.data === 'eval') {
            return this;
          }
          if (!this.left.mayHaveSideEffects(inScope)) {
            return this.right.r(this.raw).p(this.line, this.column);
          }
          return this;
        }
      ], [
        [While], function(inScope) {
          if (this.condition.isFalsey()) {
            if (this.condition.mayHaveSideEffects(inScope)) {
              return this.condition;
            } else {
              return (new Undefined).g();
            }
          }
          if (this.condition.isTruthy()) {
            if (!this.condition.mayHaveSideEffects(inScope)) {
              if (this.block == null) {
                return (new Undefined).g();
              }
              if (this instanceof Loop) {
                return this;
              }
              return (new Loop(this.block)).g().r(this.raw).p(this.line, this.column);
            }
          }
          return this;
        }
      ], [
        [Conditional], function(inScope) {
          var block;
          if (this.condition.isFalsey()) {
            block = this.elseBlock;
          } else if (this.condition.isTruthy()) {
            block = this.block;
          } else {
            return this;
          }
          if (block == null) {
            return (new Undefined).g();
          }
          if (this.condition.mayHaveSideEffects(inScope)) {
            this.condition.unshift(block);
          }
          return block;
        }
      ], [
        [ForIn], function() {
          if (!((this.expr["instanceof"](ArrayInitialiser)) && this.expr.members.length === 0)) {
            return this;
          }
          return (new ArrayInitialiser([])).g().r(this.raw).p(this.line, this.column);
        }
      ], [
        [ForOf], function() {
          if (!((this.expr["instanceof"](ObjectInitialiser)) && this.expr.isOwn && this.expr.members.length === 0)) {
            return this;
          }
          return (new ArrayInitialiser([])).g().r(this.raw).p(this.line, this.column);
        }
      ], [
        [LogicalNotOp], function() {
          var newNode;
          newNode = (function() {
            switch (this.expr.className) {
              case Int.prototype.className:
              case Float.prototype.className:
              case String.prototype.className:
              case Bool.prototype.className:
                return (new Bool(!this.expr.data)).g();
              case Function.prototype.className:
              case BoundFunction.prototype.className:
                return (new Bool(false)).g();
              case Null.prototype.className:
              case Undefined.prototype.className:
                return (new Bool(true)).g();
              case ArrayInitialiser.prototype.className:
              case ObjectInitialiser.prototype.className:
                if (this.expr.mayHaveSideEffects()) {
                  return this;
                } else {
                  return (new Bool(false)).g();
                }
                break;
              case LogicalNotOp.prototype.className:
                if (this.expr.expr["instanceof"](LogicalNotOp)) {
                  return this.expr.expr;
                } else {
                  return this;
                }
                break;
              default:
                return this;
            }
          }).call(this);
          if (newNode === this) {
            return this;
          }
          return newNode.r(this.raw).p(this.line, this.column);
        }
      ], [
        [TypeofOp], function() {
          switch (this.expr.className) {
            case Int.prototype.className:
            case Float.prototype.className:
            case UnaryNegateOp.prototype.className:
            case UnaryPlusOp.prototype.className:
              return (new String('number')).g();
            case String.prototype.className:
              return (new String('string')).g();
            case Function.prototype.className:
            case BoundFunction.prototype.className:
              return (new String('function')).g();
            case Undefined.prototype.className:
              return (new String('undefined')).g();
            default:
              return this;
          }
        }
      ]
    ];

    function Optimiser() {
      var applicableCtors, ctor, handler, _i, _j, _len, _len1, _ref1;
      this.rules = {};
      for (_i = 0, _len = defaultRules.length; _i < _len; _i++) {
        _ref1 = defaultRules[_i], applicableCtors = _ref1[0], handler = _ref1[1];
        for (_j = 0, _len1 = applicableCtors.length; _j < _len1; _j++) {
          ctor = applicableCtors[_j];
          this.addRule(ctor.prototype.className, handler);
        }
      }
    }

    Optimiser.prototype.addRule = function(ctor, handler) {
      var _base, _ref1;
      ((_ref1 = (_base = this.rules)[ctor]) != null ? _ref1 : _base[ctor] = []).push(handler);
    };

    Optimiser.prototype.optimise = function(ast) {
      var rules;
      rules = this.rules;
      return ast.walk(function(inScope, ancestry) {
        var memo, rule, _i, _len, _ref1, _ref2;
        memo = this;
        _ref2 = (_ref1 = rules[this.className]) != null ? _ref1 : [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          rule = _ref2[_i];
          memo = rule.call(memo, inScope, ancestry);
        }
        return memo;
      });
    };

    return Optimiser;

  })();

}).call(this);
