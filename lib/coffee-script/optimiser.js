// Generated by CoffeeScript 1.3.3
var CS, any, beingDeclared, concat, concatMap, declarationsFor, difference, envEnrichments, foldl, foldl1, isFalsey, isFalsey_, isTruthy, isTruthy_, mayHaveSideEffects, mayHaveSideEffects_, union, usedAsExpression, walk, _ref, _ref1,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty;

_ref = require('./functional-helpers'), any = _ref.any, concat = _ref.concat, concatMap = _ref.concatMap, difference = _ref.difference, foldl = _ref.foldl, foldl1 = _ref.foldl1, union = _ref.union;

_ref1 = require('./helpers'), beingDeclared = _ref1.beingDeclared, declarationsFor = _ref1.declarationsFor, usedAsExpression = _ref1.usedAsExpression, envEnrichments = _ref1.envEnrichments;

CS = require('./nodes');

isTruthy_ = function() {
  switch (false) {
    case !this["instanceof"](CS.ArrayInitialiser, CS.Class, CS.DeleteOp, CS.ForIn, CS.ForOf, CS.Function, CS.BoundFunction, CS.HeregExp, CS.ObjectInitialiser, CS.Range, CS.RegExp, CS.Slice, CS.TypeofOp, CS.While):
      return true;
    case !this["instanceof"](CS.AssignOp):
      return isTruthy(this.expr);
    case !this["instanceof"](CS.Block):
      if (this.statements.length === 0) {
        return false;
      } else {
        return isTruthy(this.statements[this.statements.length - 1]);
      }
      break;
    case !this["instanceof"](CS.Bool, CS.Float, CS.Int, CS.String):
      return !!this.data;
    case !this["instanceof"](CS.Conditional):
      return (isTruthy(this.condition)) && (isTruthy(this.block)) || (isFalsey(this.condition)) && isTruthy(this.elseBlock);
    case !this["instanceof"](CS.LogicalAndOp):
      return (isTruthy(this.left)) && isTruthy(this.right);
    case !this["instanceof"](CS.LogicalNotOp):
      return isFalsey(this.expr);
    case !this["instanceof"](CS.LogicalOrOp):
      return (isTruthy(this.left)) || isTruthy(this.right);
    case !this["instanceof"](CS.Program):
      return isTruthy(this.block);
    case !this["instanceof"](CS.SeqOp):
      return isTruthy(this.right);
    case !this["instanceof"](CS.UnaryExistsOp):
      return (isTruthy(this.expr)) || this.expr["instanceof"](CS.Int, CS.Float, CS.String, CS.UnaryPlusOp, CS.UnaryNegateOp, CS.LogicalNotOp);
    default:
      return false;
  }
};

isTruthy = function(node) {
  if (node != null) {
    return isTruthy_.call(node);
  } else {
    return false;
  }
};

isFalsey_ = function() {
  switch (false) {
    case !this["instanceof"](CS.Null, CS.Undefined):
      return true;
    case !this["instanceof"](CS.AssignOp):
      return isFalsey(this.expr);
    case !this["instanceof"](CS.Block):
      if (this.statements.length === 0) {
        return true;
      } else {
        return isFalsey(this.statements[this.statements.length - 1]);
      }
      break;
    case !this["instanceof"](CS.Bool, CS.Float, CS.Int, CS.String):
      return !this.data;
    case !this["instanceof"](CS.Conditional):
      return (isTruthy(this.condition)) && (isFalsey(this.block)) || (isFalsey(this.condition)) && isFalsey(this.elseBlock);
    case !this["instanceof"](CS.LogicalAndOp):
      return (isFalsey(this.left)) || isFalsey(this.right);
    case !this["instanceof"](CS.LogicalNotOp):
      return isTruthy(this.expr);
    case !this["instanceof"](CS.LogicalOrOp):
      return (isFalsey(this.left)) && isFalsey(this.right);
    case !this["instanceof"](CS.Program):
      return isFalsey(this.block);
    case !this["instanceof"](CS.SeqOp):
      return isFalsey(this.right);
    case !this["instanceof"](CS.UnaryExistsOp):
      return this.expr["instanceof"](CS.Null, CS.Undefined);
    default:
      return false;
  }
};

isFalsey = function(node) {
  if (node != null) {
    return isFalsey_.call(node);
  } else {
    return false;
  }
};

mayHaveSideEffects_ = [
  [
    [CS.ClassProtoAssignOp, CS.Function, CS.BoundFunction, CS.Null, CS.RegExp, CS.This, CS.Undefined], function() {
      return false;
    }
  ], [
    [CS.Break, CS.Continue, CS.DeleteOp, CS.NewOp, CS.PreDecrementOp, CS.PreIncrementOp, CS.PostDecrementOp, CS.PostIncrementOp, CS.Return, CS.Super], function() {
      return true;
    }
  ], [
    [CS.ArrayInitialiser], function(inScope) {
      return any(this.members, function(m) {
        return mayHaveSideEffects(m, inScope);
      });
    }
  ], [
    [CS.Block], function(inScope) {
      return any(this.statements, function(s) {
        return mayHaveSideEffects(s, inScope);
      });
    }
  ], [
    [CS.Class], function(inScope) {
      return (mayHaveSideEffects(this.parent, inScope)) || (this.nameAssignment != null) && (this.name || (beingDeclared(this.nameAssignment)).length > 0);
    }
  ], [
    [CS.Conditional], function(inScope) {
      return (mayHaveSideEffects(this.condition, inScope)) || (!isFalsey(this.condition)) && (mayHaveSideEffects(this.block, inScope)) || (!isTruthy(this.condition)) && mayHaveSideEffects(this.elseBlock, inScope);
    }
  ], [
    [CS.DoOp], function(inScope) {
      var args, newScope, p;
      if (!this.expr["instanceof"](CS.Function, CS.BoundFunction)) {
        return true;
      }
      newScope = difference(inScope, concatMap(this.expr.parameters, beingDeclared));
      args = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.expr.parameters;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          p = _ref2[_i];
          if (p["instanceof"](CS.AssignOp)) {
            _results.push(p.expr);
          } else {
            _results.push(p);
          }
        }
        return _results;
      }).call(this);
      if (any(args, function(a) {
        return mayHaveSideEffects(a, newScope);
      })) {
        return true;
      }
      return mayHaveSideEffects(this.expr, newScope);
    }
  ], [
    [CS.FunctionApplication], function(inScope) {
      var newScope;
      if (!this["function"]["instanceof"](CS.Function, CS.BoundFunction)) {
        return true;
      }
      newScope = difference(inScope, concatMap(this["function"].parameters, beingDeclared));
      if (any(this["arguments"], function(a) {
        return mayHaveSideEffects(a, newScope);
      })) {
        return true;
      }
      return mayHaveSideEffects(this["function"].block, newScope);
    }
  ], [
    [CS.ObjectInitialiser], function(inScope) {
      return any(this.members, function(_arg) {
        var expr, key;
        key = _arg[0], expr = _arg[1];
        return (mayHaveSideEffects(key, inScope)) || mayHaveSideEffects(expr, inScope);
      });
    }
  ], [
    [CS.Switch], function(inScope) {
      var block, cond, conds, otherExprs;
      otherExprs = concat((function() {
        var _i, _len, _ref2, _ref3, _results;
        _ref2 = this.cases;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          _ref3 = _ref2[_i], conds = _ref3[0], block = _ref3[1];
          _results.push(__slice.call((function() {
              var _j, _len1, _results1;
              _results1 = [];
              for (_j = 0, _len1 = conds.length; _j < _len1; _j++) {
                cond = conds[_j];
                _results1.push(cond);
              }
              return _results1;
            })()).concat([block]));
        }
        return _results;
      }).call(this));
      return any([this.expr, this.elseBlock].concat(__slice.call(otherExprs)), function(e) {
        return mayHaveSideEffects(e, inScope);
      });
    }
  ], [
    [CS.While], function(inScope) {
      return (mayHaveSideEffects(this.condition, inScope)) || (!isFalsey(this.condition)) && mayHaveSideEffects(this.block, inScope);
    }
  ], [
    [CS.AssignOp, CS.ClassProtoAssignOp, CS.CompoundAssignOp, CS.ExistsAssignOp], function(inScope) {
      return (mayHaveSideEffects(this.expr, inScope)) || (beingDeclared(this.assignee)).length;
    }
  ], [
    [CS.Bool, CS.Float, CS.Identifier, CS.Int, CS.JavaScript, CS.String], function() {
      return false;
    }
  ]
];

mayHaveSideEffects = (function() {
  var ctor, ctors, handler, handlers, _i, _j, _len, _len1, _ref2;
  handlers = {};
  for (_i = 0, _len = mayHaveSideEffects_.length; _i < _len; _i++) {
    _ref2 = mayHaveSideEffects_[_i], ctors = _ref2[0], handler = _ref2[1];
    for (_j = 0, _len1 = ctors.length; _j < _len1; _j++) {
      ctor = ctors[_j];
      handlers[ctor.prototype.className] = handler;
    }
  }
  return function(node, inScope) {
    if (node == null) {
      return false;
    }
    if (Object.prototype.hasOwnProperty.call(handlers, node.className)) {
      return handlers[node.className].call(node, inScope);
    } else {
      return any(node.childNodes, function(child) {
        return mayHaveSideEffects(node[child], inScope);
      });
    }
  };
})();

walk = (function() {
  var walk_;
  walk_ = {
    ArrayInitialiser: function(fn, inScope, ancestry) {
      var member;
      if (inScope == null) {
        inScope = [];
      }
      if (ancestry == null) {
        ancestry = [];
      }
      if (__indexOf.call(ancestry, this) >= 0) {
        return this;
      }
      ancestry = [this].concat(__slice.call(ancestry));
      this.members = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.members;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          member = _ref2[_i];
          while (member !== walk((member = fn.call(member, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(member));
          _results.push(member);
        }
        return _results;
      }).call(this);
      ancestry.shift();
      return fn.call(this, inScope, ancestry);
    },
    Block: function(fn, inScope, ancestry) {
      var statement;
      if (inScope == null) {
        inScope = [];
      }
      if (ancestry == null) {
        ancestry = [];
      }
      if (__indexOf.call(ancestry, this) >= 0) {
        return this;
      }
      ancestry = [this].concat(__slice.call(ancestry));
      this.statements = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.statements;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          statement = _ref2[_i];
          while (statement !== walk((statement = fn.call(statement, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(statement));
          _results.push(statement);
        }
        return _results;
      }).call(this);
      ancestry.shift();
      return fn.call(this, inScope, ancestry);
    },
    Function: function(fn, inScope, ancestry) {
      var param;
      if (inScope == null) {
        inScope = [];
      }
      if (ancestry == null) {
        ancestry = [];
      }
      if (__indexOf.call(ancestry, this) >= 0) {
        return this;
      }
      ancestry = [this].concat(__slice.call(ancestry));
      this.parameters = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this.parameters;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          param = _ref2[_i];
          while (param !== walk((param = fn.call(param, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(param));
          _results.push(param);
        }
        return _results;
      }).call(this);
      if (this.block != null) {
        while (this.block !== walk((this.block = fn.call(this.block, inScope, ancestry)), fn, inScope, ancestry)) {
          continue;
        }
      }
      ancestry.shift();
      return fn.call(this, inScope, ancestry);
    },
    FunctionApplication: function(fn, inScope, ancestry) {
      var arg;
      if (inScope == null) {
        inScope = [];
      }
      if (ancestry == null) {
        ancestry = [];
      }
      if (__indexOf.call(ancestry, this) >= 0) {
        return this;
      }
      ancestry = [this].concat(__slice.call(ancestry));
      while (this["function"] !== walk((this["function"] = fn.call(this["function"], inScope, ancestry)), fn, inScope, ancestry)) {
        continue;
      }
      inScope = union(inScope, envEnrichments(this["function"]));
      this["arguments"] = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this["arguments"];
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          arg = _ref2[_i];
          while (arg !== walk((arg = fn.call(arg, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(arg));
          _results.push(arg);
        }
        return _results;
      }).call(this);
      ancestry.shift();
      return fn.call(this, inScope, ancestry);
    },
    NewOp: function(fn, inScope, ancestry) {
      var arg;
      if (inScope == null) {
        inScope = [];
      }
      if (ancestry == null) {
        ancestry = [];
      }
      if (__indexOf.call(ancestry, this) >= 0) {
        return this;
      }
      ancestry = [this].concat(__slice.call(ancestry));
      while (this.ctor !== walk((this.ctor = fn.call(this.ctor, inScope, ancestry)), fn, inScope, ancestry)) {
        continue;
      }
      inScope = union(inScope, envEnrichments(this.ctor));
      this["arguments"] = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this["arguments"];
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          arg = _ref2[_i];
          while (arg !== walk((arg = fn.call(arg, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(arg));
          _results.push(arg);
        }
        return _results;
      }).call(this);
      ancestry.shift();
      return fn.call(this, inScope, ancestry);
    },
    ObjectInitialiser: function(fn, inScope, ancestry) {
      var key, val;
      if (inScope == null) {
        inScope = [];
      }
      if (ancestry == null) {
        ancestry = [];
      }
      if (__indexOf.call(ancestry, this) >= 0) {
        return this;
      }
      ancestry = [this].concat(__slice.call(ancestry));
      this.members = (function() {
        var _i, _len, _ref2, _ref3, _results;
        _ref2 = this.members;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          _ref3 = _ref2[_i], key = _ref3[0], val = _ref3[1];
          while (val !== walk((val = fn.call(val, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(val));
          _results.push([key, val]);
        }
        return _results;
      }).call(this);
      ancestry.shift();
      return fn.call(this, inScope, ancestry);
    },
    Super: function(fn, inScope, ancestry) {
      var arg;
      if (inScope == null) {
        inScope = [];
      }
      if (ancestry == null) {
        ancestry = [];
      }
      if (__indexOf.call(ancestry, this) >= 0) {
        return this;
      }
      ancestry = [this].concat(__slice.call(ancestry));
      this["arguments"] = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = this["arguments"];
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          arg = _ref2[_i];
          while (arg !== walk((arg = fn.call(arg, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(arg));
          _results.push(arg);
        }
        return _results;
      }).call(this);
      ancestry.shift();
      return fn.call(this, inScope, ancestry);
    },
    Switch: function(fn, inScope, ancestry) {
      var block, cond, conds;
      if (inScope == null) {
        inScope = [];
      }
      if (ancestry == null) {
        ancestry = [];
      }
      if (__indexOf.call(ancestry, this) >= 0) {
        return this;
      }
      ancestry = [this].concat(__slice.call(ancestry));
      if (this.expr != null) {
        while (this.expr !== walk((this.expr = fn.call(this.expr, inScope, ancestry)), fn, inScope, ancestry)) {
          continue;
        }
        inScope = union(inScope, envEnrichments(this.expr));
      }
      this.cases = (function() {
        var _i, _len, _ref2, _ref3, _results;
        _ref2 = this.cases;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          _ref3 = _ref2[_i], conds = _ref3[0], block = _ref3[1];
          conds = (function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = conds.length; _j < _len1; _j++) {
              cond = conds[_j];
              while (cond !== walk((cond = fn.call(cond, inScope, ancestry)), fn, inScope, ancestry)) {
                continue;
              }
              inScope = union(inScope, envEnrichments(cond));
              _results1.push(cond);
            }
            return _results1;
          })();
          while (block !== walk((block = fn.call(block, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(block));
          _results.push([conds, block]);
        }
        return _results;
      }).call(this);
      if (typeof elseBlock !== "undefined" && elseBlock !== null) {
        while (this.elseBlock !== walk((this.elseBlock = fn.call(this.elseBlock, inScope, ancestry)), fn, inScope, ancestry)) {
          continue;
        }
      }
      ancestry.shift();
      return fn.call(this, inScope, ancestry);
    }
  };
  return function(node, fn, inScope, ancestry) {
    var child, childName, handlers, key, val, _i, _len, _ref2;
    if (inScope == null) {
      inScope = [];
    }
    if (ancestry == null) {
      ancestry = [];
    }
    handlers = {};
    for (key in walk_) {
      if (!__hasProp.call(walk_, key)) continue;
      val = walk_[key];
      handlers[CS[key].prototype.className] = val;
    }
    if (Object.prototype.hasOwnProperty.call(handlers, node.className)) {
      return handlers[node.className].call(node, fn, inScope, ancestry);
    } else {
      if (__indexOf.call(ancestry, node) >= 0) {
        return node;
      }
      ancestry = [node].concat(__slice.call(ancestry));
      _ref2 = node.childNodes;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        childName = _ref2[_i];
        child = node[childName];
        if (child != null) {
          while (child !== walk((child = fn.call(child, inScope, ancestry)), fn, inScope, ancestry)) {
            continue;
          }
          inScope = union(inScope, envEnrichments(child));
          node[childName] = child;
        }
        child;

      }
      ancestry.shift();
      return fn.call(node, inScope, ancestry);
    }
  };
})();

this.Optimiser = (function() {
  var defaultRules;

  Optimiser.isTruthy = isTruthy;

  Optimiser.isFalsey = isFalsey;

  Optimiser.mayHaveSideEffects = mayHaveSideEffects;

  defaultRules = [
    [
      CS.Program, function() {
        if ((this.block != null) && mayHaveSideEffects(this.block, [])) {
          return this;
        } else {
          return new CS.Program(null);
        }
      }
    ], [
      CS.Block, function(inScope, ancestors) {
        var canDropLast, stmts,
          _this = this;
        canDropLast = !usedAsExpression(this, ancestors);
        stmts = concat((function() {
          var i, s, _i, _len, _ref2, _results;
          _ref2 = _this.statements;
          _results = [];
          for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
            s = _ref2[i];
            switch (false) {
              case !((!mayHaveSideEffects(s, inScope)) && (canDropLast || i + 1 !== _this.statements.length)):
                _results.push([declarationsFor(s)]);
                break;
              case !s["instanceof"](CS.Block):
                _results.push(s.statements);
                break;
              case !s["instanceof"](CS.SeqOp):
                _results.push([s.left, s.right]);
                break;
              default:
                _results.push([s]);
            }
          }
          return _results;
        })());
        switch (stmts.length) {
          case 0:
            return (new CS.Undefined).g();
          case 1:
            return stmts[0];
          default:
            return foldl1(stmts, function(expr, s) {
              return new CS.SeqOp(expr, s);
            });
        }
      }
    ], [
      CS.SeqOp, function(inScope, ancestors) {
        if (mayHaveSideEffects(this.left, inScope)) {
          if ((mayHaveSideEffects(this.right, inScope)) || usedAsExpression(this, ancestors)) {
            return this;
          } else {
            return this.left;
          }
        } else if ((this.right["instanceof"](CS.Identifier)) && this.right.data === 'eval') {
          if ((this.left["instanceof"](CS.Int)) && this.left.data === 0) {
            return this;
          }
          return new CS.SeqOp((new CS.Int(0)).g(), this.right);
        } else {
          return this.right;
        }
      }
    ], [
      CS.AssignOp, function() {
        if (!this.expr["instanceof"](CS.SeqOp)) {
          return this;
        }
        return new CS.SeqOp(this.expr.left, new CS.AssignOp(this.assignee, this.expr.right));
      }
    ], [
      CS.While, function(inScope) {
        if (isFalsey(this.condition)) {
          if (mayHaveSideEffects(this.condition, inScope)) {
            return this.condition;
          } else {
            if (typeof block !== "undefined" && block !== null) {
              return declarationsFor(this.block);
            } else {
              return (new CS.Undefined).g();
            }
          }
        }
        if (isTruthy(this.condition)) {
          if (!mayHaveSideEffects(this.condition, inScope)) {
            if (this.block == null) {
              return (new CS.Undefined).g();
            }
            if (this instanceof CS.Loop) {
              return this;
            }
            return (new CS.Loop(this.block)).g();
          }
        }
        return this;
      }
    ], [
      CS.Conditional, function(inScope) {
        var block, removedBlock;
        if (isFalsey(this.condition)) {
          block = this.elseBlock;
          removedBlock = this.block;
        } else if (isTruthy(this.condition)) {
          block = this.block;
          removedBlock = this.elseBlock;
        } else {
          return this;
        }
        if (removedBlock != null) {
          block = new CS.SeqOp(declarationsFor(removedBlock), block);
        }
        if (mayHaveSideEffects(this.condition, inScope)) {
          block = new CS.SeqOp(this.condition, block);
        }
        return block;
      }
    ], [
      CS.ForIn, function(inScope, ancestors) {
        var retVal;
        if (!((this.expr["instanceof"](CS.ArrayInitialiser)) && this.expr.members.length === 0)) {
          return this;
        }
        retVal = usedAsExpression(this, ancestors) ? new CS.ArrayInitialiser([]) : new CS.Undefined;
        return new CS.SeqOp(declarationsFor(this), retVal.g());
      }
    ], [
      CS.ForOf, function() {
        var retVal;
        if (!((this.expr["instanceof"](CS.ObjectInitialiser)) && this.expr.isOwn && this.expr.members.length === 0)) {
          return this;
        }
        retVal = usedAsExpression(this, ancestors) ? new CS.ArrayInitialiser([]) : new CS.Undefined;
        return new CS.SeqOp(declarationsFor(this), retVal.g());
      }
    ], [
      CS.ExistsOp, function() {
        if (this.left["instanceof"](CS.Null, CS.Undefined)) {
          return this.right;
        } else {
          return this;
        }
      }
    ], [
      CS.UnaryExistsOp, function() {
        if (this.expr["instanceof"](CS.Null, CS.Undefined)) {
          return (new CS.Bool(false)).g();
        } else {
          return this;
        }
      }
    ], [
      CS.LogicalNotOp, function(inScope) {
        switch (false) {
          case !this.expr["instanceof"](CS.Int, CS.Float, CS.String, CS.Bool):
            return (new Bool(!this.expr.data)).g();
          case !this.expr["instanceof"](CS.Function, CS.BoundFunction):
            return (new CS.Bool(false)).g();
          case !this.expr["instanceof"](CS.Null, CS.Undefined):
            return (new CS.Bool(true)).g();
          case !this.expr["instanceof"](CS.ArrayInitialiser, CS.ObjectInitialiser):
            if (mayHaveSideEffects(this.expr, inScope)) {
              return this;
            } else {
              return new CS.SeqOp(declarationsFor(this.expr), (new CS.Bool(false)).g());
            }
            break;
          case !this.expr["instanceof"](CS.LogicalNotOp):
            if (this.expr.expr["instanceof"](CS.LogicalNotOp)) {
              return this.expr.expr;
            } else {
              return this;
            }
            break;
          default:
            return this;
        }
      }
    ], [
      CS.TypeofOp, function() {
        switch (false) {
          case !this.expr["instanceof"](CS.Int, CS.Float, CS.UnaryNegateOp, CS.UnaryPlusOp):
            return (new String('number')).g();
          case !this.expr["instanceof"](CS.String):
            return (new CS.String('string')).g();
          case !this.expr["instanceof"](CS.Function, CS.BoundFunction):
            return (new CS.String('function')).g();
          case !this.expr["instanceof"](CS.Undefined):
            return (new CS.String('undefined')).g();
          default:
            return this;
        }
      }
    ]
  ];

  function Optimiser() {
    var ctor, ctors, handler, _i, _j, _k, _len, _len1, _ref2;
    this.rules = {};
    for (_i = 0, _len = defaultRules.length; _i < _len; _i++) {
      _ref2 = defaultRules[_i], ctors = 2 <= _ref2.length ? __slice.call(_ref2, 0, _j = _ref2.length - 1) : (_j = 0, []), handler = _ref2[_j++];
      for (_k = 0, _len1 = ctors.length; _k < _len1; _k++) {
        ctor = ctors[_k];
        this.addRule(ctor.prototype.className, handler);
      }
    }
  }

  Optimiser.prototype.addRule = function(ctor, handler) {
    var _base, _ref2;
    ((_ref2 = (_base = this.rules)[ctor]) != null ? _ref2 : _base[ctor] = []).push(handler);
  };

  Optimiser.prototype.optimise = function(ast) {
    var rules;
    rules = this.rules;
    return walk(ast, function(inScope, ancestry) {
      var memo, rule, _i, _len, _ref2, _ref3;
      memo = this;
      _ref3 = (_ref2 = rules[this.className]) != null ? _ref2 : [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        rule = _ref3[_i];
        memo = rule.call(memo, inScope, ancestry);
      }
      return memo;
    });
  };

  return Optimiser;

})();
