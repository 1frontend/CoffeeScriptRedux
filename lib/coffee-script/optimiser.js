// Generated by CoffeeScript 1.3.3
var any, beingDeclared, concat, concatMap, declarationsFor, difference, foldl, foldl1, isFalsey, isFalsey_, isTruthy, isTruthy_, mayHaveSideEffects, mayHaveSideEffects_, name, node, usedAsExpression, _ref, _ref1, _ref2,
  __slice = [].slice;

_ref = require('./functional-helpers'), any = _ref.any, concat = _ref.concat, concatMap = _ref.concatMap, difference = _ref.difference, foldl = _ref.foldl, foldl1 = _ref.foldl1;

_ref1 = require('./helpers'), beingDeclared = _ref1.beingDeclared, declarationsFor = _ref1.declarationsFor, usedAsExpression = _ref1.usedAsExpression;

_ref2 = require('./nodes');
for (name in _ref2) {
  node = _ref2[name];
  global[name in global ? "CS" + name : name] = node;
}

isTruthy_ = function() {
  switch (false) {
    case !this["instanceof"](ArrayInitialiser, Class, DeleteOp, ForIn, ForOf, CSFunction, BoundFunction, HeregExp, ObjectInitialiser, Range, RegExp, Slice, TypeofOp, While):
      return true;
    case !this["instanceof"](AssignOp):
      return isTruthy(this.expr);
    case !this["instanceof"](Block):
      if (this.statements.length === 0) {
        return false;
      } else {
        return isTruthy(this.statements[this.statements.length - 1]);
      }
      break;
    case !this["instanceof"](Bool, Float, Int, CSString):
      return !!this.data;
    case !this["instanceof"](Conditional):
      return (isTruthy(this.condition)) && (isTruthy(this.block)) || (isFalsey(this.condition)) && isTruthy(this.elseBlock);
    case !this["instanceof"](LogicalAndOp):
      return (isTruthy(this.left)) && isTruthy(this.right);
    case !this["instanceof"](LogicalNotOp):
      return isFalsey(this.expr);
    case !this["instanceof"](LogicalOrOp):
      return (isTruthy(this.left)) || isTruthy(this.right);
    case !this["instanceof"](Program):
      return isTruthy(this.block);
    case !this["instanceof"](SeqOp):
      return isTruthy(this.right);
    case !this["instanceof"](UnaryExistsOp):
      return (isTruthy(this.expr)) || this.expr["instanceof"](Int, Float, String, UnaryPlusOp, UnaryNegateOp, LogicalNotOp);
    default:
      return false;
  }
};

isFalsey_ = function() {
  switch (false) {
    case !this["instanceof"](Null, Undefined):
      return true;
    case !this["instanceof"](AssignOp):
      return isFalsey(this.expr);
    case !this["instanceof"](Block):
      if (this.statements.length === 0) {
        return true;
      } else {
        return isFalsey(this.statements[this.statements.length - 1]);
      }
      break;
    case !this["instanceof"](Bool, Float, Int, CSString):
      return !this.data;
    case !this["instanceof"](Conditional):
      return (isTruthy(this.condition)) && (isFalsey(this.block)) || (isFalsey(this.condition)) && isFalsey(this.elseBlock);
    case !this["instanceof"](LogicalAndOp):
      return (isFalsey(this.left)) || isFalsey(this.right);
    case !this["instanceof"](LogicalNotOp):
      return isTruthy(this.expr);
    case !this["instanceof"](LogicalOrOp):
      return (isFalsey(this.left)) && isFalsey(this.right);
    case !this["instanceof"](Program):
      return isFalsey(this.block);
    case !this["instanceof"](SeqOp):
      return isFalsey(this.right);
    case !this["instanceof"](UnaryExistsOp):
      return this.expr["instanceof"](Null, Undefined);
    default:
      return false;
  }
};

mayHaveSideEffects_ = function(inScope) {
  var _this = this;
  switch (false) {
    case !this["instanceof"](ClassProtoAssignOp, CSFunction, BoundFunction, Null, RegExp, This, Undefined):
      return false;
    case !this["instanceof"](Break, Continue, DeleteOp, NewOp, PreDecrementOp, PreIncrementOp, PostDecrementOp, PostIncrementOp, Return, Super):
      return true;
    case !this["instanceof"](ArrayInitialiser):
      return any(this.members, function(m) {
        return mayHaveSideEffects(m, inScope);
      });
    case !this["instanceof"](Block):
      return any(this.statements, function(s) {
        return mayHaveSideEffects(s, inScope);
      });
    case !this["instanceof"](Class):
      return (mayHaveSideEffects(this.parent, inScope)) || (this.nameAssignment != null) && (this.name || (beingDeclared(this.nameAssignment)).length > 0);
    case !this["instanceof"](Conditional):
      return (mayHaveSideEffects(this.condition, inScope)) || (!isFalsey(this.condition)) && (mayHaveSideEffects(this.block, inScope)) || (!isTruthy(this.condition)) && mayHaveSideEffects(this.elseBlock, inScope);
    case !this["instanceof"](DoOp):
      return (function() {
        var args, newScope, p;
        if (!_this.expr["instanceof"](Function, BoundFunction)) {
          return true;
        }
        newScope = difference(inScope, concatMap(_this.expr.parameters, beingDeclared));
        args = (function() {
          var _i, _len, _ref3, _results;
          _ref3 = this.expr.parameters;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            p = _ref3[_i];
            if (p["instanceof"](AssignOp)) {
              _results.push(p.expr);
            } else {
              _results.push(p);
            }
          }
          return _results;
        }).call(_this);
        if (any(args, function(a) {
          return mayHaveSideEffects(a, newScope);
        })) {
          return true;
        }
        return mayHaveSideEffects(_this.expr, newScope);
      })();
    case !this["instanceof"](FunctionApplication):
      return (function() {
        var newScope;
        if (!_this["function"]["instanceof"](Function, BoundFunction)) {
          return true;
        }
        newScope = difference(inScope, concatMap(_this["function"].parameters, beingDeclared));
        if (any(_this["arguments"], function(a) {
          return mayHaveSideEffects(a, newScope);
        })) {
          return true;
        }
        return mayHaveSideEffects(_this["function"].block, newScope);
      })();
    case !this["instanceof"](ObjectInitialiser):
      return any(this.members, function(_arg) {
        var expr, key;
        key = _arg[0], expr = _arg[1];
        return (mayHaveSideEffects(key, inScope)) || mayHaveSideEffects(expr, inScope);
      });
    case !this["instanceof"](Switch):
      return (function() {
        var block, cond, conds, otherExprs;
        otherExprs = concat((function() {
          var _i, _len, _ref3, _ref4, _results;
          _ref3 = this.cases;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            _ref4 = _ref3[_i], conds = _ref4[0], block = _ref4[1];
            _results.push(__slice.call((function() {
                var _j, _len1, _results1;
                _results1 = [];
                for (_j = 0, _len1 = conds.length; _j < _len1; _j++) {
                  cond = conds[_j];
                  _results1.push(cond);
                }
                return _results1;
              })()).concat([block]));
          }
          return _results;
        }).call(_this));
        return any([_this.expr, _this.elseBlock].concat(__slice.call(otherExprs)), function(e) {
          return mayHaveSideEffects(e, inScope);
        });
      })();
    case !this["instanceof"](While):
      return (mayHaveSideEffects(this.condition, inScope)) || (!isFalsey(this.condition)) && mayHaveSideEffects(this.block, inScope);
    case !this["instanceof"](AssignOp, ClassProtoAssignOp, CompoundAssignOp, ExistsAssignOp):
      return (mayHaveSideEffects(this.expr, inScope)) || (beingDeclared(this.assignee)).length;
    case !this["instanceof"](Bool, Float, Identifier, Int, JavaScript, CSString):
      return false;
    default:
      return any(this.childNodes, function(child) {
        return mayHaveSideEffects(_this[child], inScope);
      });
  }
};

isTruthy = function(node) {
  if (node != null) {
    return isTruthy_.call(node);
  } else {
    return false;
  }
};

isFalsey = function(node) {
  if (node != null) {
    return isFalsey_.call(node);
  } else {
    return false;
  }
};

mayHaveSideEffects = function(node, inScope) {
  if (node != null) {
    return mayHaveSideEffects_.call(node, inScope);
  } else {
    return false;
  }
};

this.Optimiser = (function() {
  var defaultRules;

  Optimiser.isTruthy = isTruthy;

  Optimiser.isFalsey = isFalsey;

  Optimiser.mayHaveSideEffects = mayHaveSideEffects;

  defaultRules = [
    [
      Program, function() {
        if ((this.block != null) && mayHaveSideEffects(this.block, [])) {
          return this;
        } else {
          return new Program(null);
        }
      }
    ], [
      Block, function(inScope, ancestors) {
        var canDropLast, stmts,
          _this = this;
        canDropLast = !usedAsExpression(this, ancestors);
        stmts = concat((function() {
          var i, s, _i, _len, _ref3, _results;
          _ref3 = _this.statements;
          _results = [];
          for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
            s = _ref3[i];
            switch (false) {
              case !((!mayHaveSideEffects(s, inScope)) && (canDropLast || i + 1 !== _this.statements.length)):
                _results.push([declarationsFor(s)]);
                break;
              case !s["instanceof"](Block):
                _results.push(s.statements);
                break;
              case !s["instanceof"](SeqOp):
                _results.push([s.left, s.right]);
                break;
              default:
                _results.push([s]);
            }
          }
          return _results;
        })());
        switch (stmts.length) {
          case 0:
            return (new Undefined).g();
          case 1:
            return stmts[0];
          default:
            return foldl1(stmts, function(expr, s) {
              return new SeqOp(expr, s);
            });
        }
      }
    ], [
      SeqOp, function(inScope, ancestors) {
        if (mayHaveSideEffects(this.left, inScope)) {
          if ((mayHaveSideEffects(this.right, inScope)) || usedAsExpression(this, ancestors)) {
            return this;
          } else {
            return this.left;
          }
        } else if ((this.right["instanceof"](Identifier)) && this.right.data === 'eval') {
          if ((this.left["instanceof"](Int)) && this.left.data === 0) {
            return this;
          }
          return new SeqOp((new Int(0)).g(), this.right);
        } else {
          return this.right;
        }
      }
    ], [
      AssignOp, function() {
        if (!this.expr["instanceof"](SeqOp)) {
          return this;
        }
        return new SeqOp(this.expr.left, new AssignOp(this.assignee, this.expr.right));
      }
    ], [
      While, function(inScope) {
        if (isFalsey(this.condition)) {
          if (mayHaveSideEffects(this.condition, inScope)) {
            return this.condition;
          } else {
            if (typeof block !== "undefined" && block !== null) {
              return declarationsFor(this.block);
            } else {
              return (new Undefined).g();
            }
          }
        }
        if (isTruthy(this.condition)) {
          if (!mayHaveSideEffects(this.condition, inScope)) {
            if (this.block == null) {
              return (new Undefined).g();
            }
            if (this instanceof Loop) {
              return this;
            }
            return (new Loop(this.block)).g();
          }
        }
        return this;
      }
    ], [
      Conditional, function(inScope) {
        var block, removedBlock;
        if (isFalsey(this.condition)) {
          block = this.elseBlock;
          removedBlock = this.block;
        } else if (isTruthy(this.condition)) {
          block = this.block;
          removedBlock = this.elseBlock;
        } else {
          return this;
        }
        if (removedBlock != null) {
          block = new SeqOp(declarationsFor(removedBlock), block);
        }
        if (mayHaveSideEffects(this.condition, inScope)) {
          block = new SeqOp(this.condition, block);
        }
        return block;
      }
    ], [
      ForIn, function(inScope, ancestors) {
        var retVal;
        if (!((this.expr["instanceof"](ArrayInitialiser)) && this.expr.members.length === 0)) {
          return this;
        }
        retVal = usedAsExpression(this, ancestors) ? new ArrayInitialiser([]) : new Undefined;
        return new SeqOp(declarationsFor(this), retVal.g());
      }
    ], [
      ForOf, function() {
        var retVal;
        if (!((this.expr["instanceof"](ObjectInitialiser)) && this.expr.isOwn && this.expr.members.length === 0)) {
          return this;
        }
        retVal = usedAsExpression(this, ancestors) ? new ArrayInitialiser([]) : new Undefined;
        return new SeqOp(declarationsFor(this), retVal.g());
      }
    ], [
      ExistsOp, function() {
        if (this.left["instanceof"](Null, Undefined)) {
          return this.right;
        } else {
          return this;
        }
      }
    ], [
      UnaryExistsOp, function() {
        if (this.expr["instanceof"](Null, Undefined)) {
          return (new Bool(false)).g();
        } else {
          return this;
        }
      }
    ], [
      LogicalNotOp, function(inScope) {
        switch (this.expr.className) {
          case Int.prototype.className:
          case Float.prototype.className:
          case String.prototype.className:
          case Bool.prototype.className:
            return (new Bool(!this.expr.data)).g();
          case Function.prototype.className:
          case BoundFunction.prototype.className:
            return (new Bool(false)).g();
          case Null.prototype.className:
          case Undefined.prototype.className:
            return (new Bool(true)).g();
          case ArrayInitialiser.prototype.className:
          case ObjectInitialiser.prototype.className:
            if (mayHaveSideEffects(this.expr, inScope)) {
              return this;
            } else {
              return new SeqOp(declarationsFor(this.expr), (new Bool(false)).g());
            }
            break;
          case LogicalNotOp.prototype.className:
            if (this.expr.expr["instanceof"](LogicalNotOp)) {
              return this.expr.expr;
            } else {
              return this;
            }
            break;
          default:
            return this;
        }
      }
    ], [
      TypeofOp, function() {
        switch (this.expr.className) {
          case Int.prototype.className:
          case Float.prototype.className:
          case UnaryNegateOp.prototype.className:
          case UnaryPlusOp.prototype.className:
            return (new String('number')).g();
          case String.prototype.className:
            return (new String('string')).g();
          case Function.prototype.className:
          case BoundFunction.prototype.className:
            return (new String('function')).g();
          case Undefined.prototype.className:
            return (new String('undefined')).g();
          default:
            return this;
        }
      }
    ]
  ];

  function Optimiser() {
    var ctor, ctors, handler, _i, _j, _k, _len, _len1, _ref3;
    this.rules = {};
    for (_i = 0, _len = defaultRules.length; _i < _len; _i++) {
      _ref3 = defaultRules[_i], ctors = 2 <= _ref3.length ? __slice.call(_ref3, 0, _j = _ref3.length - 1) : (_j = 0, []), handler = _ref3[_j++];
      for (_k = 0, _len1 = ctors.length; _k < _len1; _k++) {
        ctor = ctors[_k];
        this.addRule(ctor.prototype.className, handler);
      }
    }
  }

  Optimiser.prototype.addRule = function(ctor, handler) {
    var _base, _ref3;
    ((_ref3 = (_base = this.rules)[ctor]) != null ? _ref3 : _base[ctor] = []).push(handler);
  };

  Optimiser.prototype.optimise = function(ast) {
    var rules;
    rules = this.rules;
    return ast.walk(function(inScope, ancestry) {
      var memo, rule, _i, _len, _ref3, _ref4;
      memo = this;
      _ref4 = (_ref3 = rules[this.className]) != null ? _ref3 : [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        rule = _ref4[_i];
        memo = rule.call(memo, inScope, ancestry);
      }
      return memo;
    });
  };

  return Optimiser;

})();
