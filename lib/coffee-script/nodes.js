// Generated by CoffeeScript 1.3.3
var ArrayInitialiser, Block, Class, CompoundAssignOp, Conditional, ForOf, FunctionApplications, Functions, GenSym, HeregExp, Identifier, NegatedConditional, NewOp, Nodes, ObjectInitialiser, Primitives, Range, RegExp, RegExps, Slice, StaticMemberAccessOps, Super, Switch, While, allNodes, concat, concatMap, createNodes, exports, map, nub, union, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice,
  _this = this,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ref = require('./functional-helpers'), map = _ref.map, concat = _ref.concat, concatMap = _ref.concatMap, nub = _ref.nub, union = _ref.union;

exports = (_ref1 = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? _ref1 : this;

allNodes = {};

createNodes = function(subclasses, superclasses) {
  var className, specs, _fn;
  if (superclasses == null) {
    superclasses = [];
  }
  _fn = function(className) {
    var isCategory, klass, params, superclass, _class, _ref2, _ref3;
    superclass = (_ref2 = superclasses[0]) != null ? _ref2 : function() {};
    isCategory = (specs != null) && specs.length === 2;
    params = (function() {
      if (specs != null) {
        switch (specs.length) {
          case 0:
            return [];
          case 1:
          case 2:
            return specs[0];
        }
      } else {
        return null;
      }
    })();
    if (params == null) {
      params = (_ref3 = superclass.prototype.childNodes) != null ? _ref3 : [];
    }
    klass = (function(_super) {

      __extends(_Class, _super);

      function _Class() {
        _Class.__super__.constructor.apply(this, arguments);
        return _class.apply(this, arguments);
      }

      _class = isCategory ? function() {} : function() {
        var i, param, _i, _len, _ref4;
        for (i = _i = 0, _len = params.length; _i < _len; i = ++_i) {
          param = params[i];
          this[param] = arguments[i];
        }
        if ((_ref4 = this.initialise) != null) {
          _ref4.apply(this, arguments);
        }
        return this;
      };

      _Class.prototype.className = className;

      _Class.prototype.superclasses = superclasses;

      return _Class;

    })(superclass);
    if ((specs != null ? specs[0] : void 0) != null) {
      klass.prototype.childNodes = specs[0];
    }
    allNodes[className] = klass;
    if (isCategory) {
      return createNodes(specs[1], [klass].concat(__slice.call(superclasses)));
    } else {
      return exports[className] = klass;
    }
  };
  for (className in subclasses) {
    if (!__hasProp.call(subclasses, className)) continue;
    specs = subclasses[className];
    _fn(className);
  }
};

createNodes({
  Nodes: [
    [], {
      Assignments: [
        ['assignee', 'expr'], {
          AssignOp: null,
          ClassProtoAssignOp: null,
          CompoundAssignOp: [['op', 'assignee', 'expr']],
          ExistsAssignOp: null
        }
      ],
      BinOps: [
        ['left', 'right'], {
          BitOps: [
            null, {
              BitAndOp: null,
              BitOrOp: null,
              BitXorOp: null,
              LeftShiftOp: null,
              SignedRightShiftOp: null,
              UnsignedRightShiftOp: null
            }
          ],
          ComparisonOps: [
            null, {
              EqOp: null,
              GTEOp: null,
              GTOp: null,
              LTEOp: null,
              LTOp: null,
              NEQOp: null
            }
          ],
          ConcatOp: null,
          ExistsOp: null,
          ExtendsOp: null,
          InOp: null,
          InstanceofOp: null,
          LogicalOps: [
            null, {
              LogicalAndOp: null,
              LogicalOrOp: null
            }
          ],
          MathsOps: [
            null, {
              DivideOp: null,
              MultiplyOp: null,
              RemOp: null,
              SubtractOp: null
            }
          ],
          OfOp: null,
          PlusOp: null,
          Range: [['isInclusive', 'left', 'right']],
          SeqOp: null
        }
      ],
      Primitives: [
        ['data'], {
          Bool: null,
          Identifiers: [
            null, {
              Identifier: null,
              GenSym: ['data', 'ns']
            }
          ],
          JavaScript: null,
          Numbers: [
            null, {
              Int: null,
              Float: null
            }
          ],
          String: null
        }
      ],
      Statements: [
        [], {
          Break: null,
          Continue: null,
          Return: [['expr']],
          Throw: [['expr']]
        }
      ],
      UnaryOps: [
        ['expr'], {
          BitNotOp: null,
          DeleteOp: null,
          DoOp: null,
          LogicalNotOp: null,
          NewOp: [['ctor', 'arguments']],
          PreDecrementOp: null,
          PreIncrementOp: null,
          PostDecrementOp: null,
          PostIncrementOp: null,
          TypeofOp: null,
          UnaryExistsOp: null,
          UnaryNegateOp: null,
          UnaryPlusOp: null
        }
      ],
      MemberAccessOps: [
        null, {
          StaticMemberAccessOps: [
            ['expr', 'memberName'], {
              MemberAccessOp: null,
              ProtoMemberAccessOp: null,
              SoakedMemberAccessOp: null,
              SoakedProtoMemberAccessOp: null
            }
          ],
          DynamicMemberAccessOps: [
            ['expr', 'indexingExpr'], {
              DynamicMemberAccessOp: null,
              DynamicProtoMemberAccessOp: null,
              SoakedDynamicMemberAccessOp: null,
              SoakedDynamicProtoMemberAccessOp: null
            }
          ]
        }
      ],
      Functions: [
        ['parameters', 'block'], {
          Function: null,
          BoundFunction: null
        }
      ],
      FunctionApplications: [
        ['function', 'arguments'], {
          FunctionApplication: null,
          SoakedFunctionApplication: null
        }
      ],
      Super: [['arguments']],
      Program: [['block']],
      Block: [['statements']],
      Conditional: [['condition', 'block', 'elseBlock']],
      ForIn: [['valAssignee', 'keyAssignee', 'expr', 'step', 'filterExpr', 'block']],
      ForOf: [['isOwn', 'keyAssignee', 'valAssignee', 'expr', 'filterExpr', 'block']],
      Switch: ['expr', 'cases', 'elseBlock'],
      Try: [['block', 'catchAssignee', 'catchBlock', 'finallyBlock']],
      While: [['condition', 'block']],
      ArrayInitialiser: [['members']],
      ObjectInitialiser: [['members']],
      Class: ['nameAssignment', 'parent', 'block'],
      RegExps: [
        null, {
          RegExp: [['data', 'flags']],
          HeregExp: [['expr', 'flags']]
        }
      ],
      Null: null,
      This: null,
      Undefined: null,
      Slice: ['expr', 'isInclusive', 'left', 'right'],
      Rest: [['expr']],
      Spread: [['expr']]
    }
  ]
});

Nodes = allNodes.Nodes, Primitives = allNodes.Primitives, CompoundAssignOp = allNodes.CompoundAssignOp, StaticMemberAccessOps = allNodes.StaticMemberAccessOps, Range = allNodes.Range, ArrayInitialiser = allNodes.ArrayInitialiser, ObjectInitialiser = allNodes.ObjectInitialiser, NegatedConditional = allNodes.NegatedConditional, Conditional = allNodes.Conditional, Identifier = allNodes.Identifier, ForOf = allNodes.ForOf, Functions = allNodes.Functions, While = allNodes.While, GenSym = allNodes.GenSym, Class = allNodes.Class, Block = allNodes.Block, NewOp = allNodes.NewOp, FunctionApplications = allNodes.FunctionApplications, RegExps = allNodes.RegExps, RegExp = allNodes.RegExp, HeregExp = allNodes.HeregExp, Super = allNodes.Super, Slice = allNodes.Slice, Switch = allNodes.Switch;

Nodes.fromJSON = function(json) {
  return _this[json.nodeType].fromJSON(json);
};

Nodes.prototype.toJSON = function() {
  var child, json, _i, _len, _ref2, _ref3;
  json = {
    nodeType: this.className
  };
  _ref2 = this.childNodes;
  for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
    child = _ref2[_i];
    json[child] = (_ref3 = this[child]) != null ? _ref3.toJSON() : void 0;
  }
  return json;
};

Nodes.prototype.fmap = function(memo, fn) {
  var child, _i, _len, _ref2;
  _ref2 = this.childNodes;
  for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
    child = _ref2[_i];
    memo = this[child].fmap(memo, fn);
  }
  return fn(memo, this);
};

Nodes.prototype["instanceof"] = function() {
  var ctor, ctors, _i, _len;
  ctors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  for (_i = 0, _len = ctors.length; _i < _len; _i++) {
    ctor = ctors[_i];
    if (this.className === ctor.prototype.className) {
      return true;
    }
  }
  return false;
};

Nodes.prototype.r = function() {
  return this;
};

Nodes.prototype.p = function(line, column) {
  this.line = line;
  this.column = column;
  return this;
};

Nodes.prototype.generated = false;

Nodes.prototype.g = function() {
  this.generated = true;
  return this;
};

Primitives.prototype.childNodes = [];

StaticMemberAccessOps.prototype.childNodes = ['expr'];

StaticMemberAccessOps.prototype.toJSON = function() {
  var json;
  json = Nodes.prototype.toJSON.call(this);
  json.memberName = this.memberName;
  return json;
};

CompoundAssignOp.prototype.childNodes = ['assignee', 'expr'];

CompoundAssignOp.prototype.toJSON = function() {
  var json;
  json = Nodes.prototype.toJSON.call(this);
  json.op = this.op.prototype.className;
  return json;
};

Range.prototype.childNodes = ['left', 'right'];

Range.prototype.toJSON = function() {
  var json;
  json = Nodes.prototype.toJSON.call(this);
  json.isInclusive = this.isInclusive;
  return json;
};

ForOf.prototype.childNodes = ['keyAssignee', 'valAssignee', 'expr', 'filterExpr', 'block'];

ForOf.prototype.toJSON = function() {
  var json;
  json = Nodes.prototype.toJSON.call(this);
  json.isOwn = this.isOwn;
  return json;
};

Class.prototype.toJSON = function() {
  var json;
  json = Nodes.prototype.toJSON.call(this);
  json.name = this.name;
  return json;
};

RegExp.prototype.childNodes = [];

RegExp.prototype.toJSON = function() {
  var json;
  json = Nodes.prototype.toJSON.call(this);
  json.data = this.data;
  json.flags = this.flags;
  return json;
};

HeregExp.prototype.childNodes = ['expr'];

HeregExp.prototype.toJSON = function() {
  var json;
  json = Nodes.prototype.toJSON.call(this);
  json.flags = this.flags;
  return json;
};

Slice.prototype.childNodes = ['expr', 'left', 'right'];

Slice.prototype.toJSON = function() {
  var json;
  json = Nodes.prototype.toJSON.call(this);
  json.isInclusive = this.isInclusive;
  return json;
};

ArrayInitialiser.prototype.childNodes = [];

ArrayInitialiser.prototype.toJSON = function() {
  var json, m;
  json = Nodes.prototype.toJSON.call(this);
  json.members = (function() {
    var _i, _len, _ref2, _results;
    _ref2 = this.members;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      m = _ref2[_i];
      _results.push(m.toJSON());
    }
    return _results;
  }).call(this);
  return json;
};

Block.prototype.childNodes = [];

Block.prototype.toJSON = function() {
  var json, s;
  json = Nodes.prototype.toJSON.call(this);
  json.statements = (function() {
    var _i, _len, _ref2, _results;
    _ref2 = this.statements;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      s = _ref2[_i];
      _results.push(s.toJSON());
    }
    return _results;
  }).call(this);
  return json;
};

Functions.prototype.childNodes = ['block'];

Functions.prototype.toJSON = function() {
  var json, p;
  json = Nodes.prototype.toJSON.call(this);
  json.parameters = (function() {
    var _i, _len, _ref2, _results;
    _ref2 = this.parameters;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      p = _ref2[_i];
      _results.push(p.toJSON());
    }
    return _results;
  }).call(this);
  return json;
};

FunctionApplications.prototype.childNodes = ['function'];

FunctionApplications.prototype.toJSON = function() {
  var a, json;
  json = Nodes.prototype.toJSON.call(this);
  json["arguments"] = (function() {
    var _i, _len, _ref2, _results;
    _ref2 = this["arguments"];
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      a = _ref2[_i];
      _results.push(a.toJSON());
    }
    return _results;
  }).call(this);
  return json;
};

NewOp.prototype.childNodes = ['ctor'];

NewOp.prototype.toJSON = FunctionApplications.prototype.toJSON;

ObjectInitialiser.prototype.childNodes = [];

ObjectInitialiser.prototype.toJSON = function() {
  var expr, json, key;
  json = Nodes.prototype.toJSON.call(this);
  json.members = (function() {
    var _i, _len, _ref2, _ref3, _results;
    _ref2 = this.members;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      _ref3 = _ref2[_i], key = _ref3[0], expr = _ref3[1];
      _results.push([key.toJSON(), expr.toJSON()]);
    }
    return _results;
  }).call(this);
  return json;
};

Super.prototype.childNodes = [];

Super.prototype.toJSON = FunctionApplications.prototype.toJSON;

Switch.prototype.childNodes = ['expr', 'elseBlock'];

Switch.prototype.toJSON = function() {
  var block, c, conds, json;
  json = Nodes.prototype.toJSON.call(this);
  json.cases = (function() {
    var _i, _len, _ref2, _ref3, _results;
    _ref2 = this.cases;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      _ref3 = _ref2[_i], conds = _ref3[0], block = _ref3[1];
      _results.push([
        (function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = conds.length; _j < _len1; _j++) {
            c = conds[_j];
            _results1.push(c.toJSON());
          }
          return _results1;
        })(), block.toJSON()
      ]);
    }
    return _results;
  }).call(this);
  return json;
};

Block.prototype.wrap = function(s) {
  return new Block(s != null ? [s] : []).r(s.raw).p(s.line, s.column);
};

Class.prototype.initialise = function() {
  return this.name = (function() {
    if (this.nameAssignment != null) {
      switch (this.nameAssignment.className) {
        case Identifier.prototype.className:
          return this.nameAssignment.data;
        case MemberAccessOp.prototype.className:
        case ProtoMemberAccessOp.prototype.className:
        case SoakedMemberAccessOp.prototype.className:
        case SoakedProtoMemberAccessOp.prototype.className:
          return this.nameAssignment.memberName;
        default:
          return null;
      }
    } else {
      return null;
    }
  }).call(this);
};

GenSym.prototype.initialise = function() {
  var _ref2;
  return (_ref2 = this.ns) != null ? _ref2 : this.ns = '';
};

ObjectInitialiser.prototype.keys = function() {
  return map(this.members(function(_arg) {
    var key, val;
    key = _arg[0], val = _arg[1];
    return key;
  }));
};

ObjectInitialiser.prototype.vals = function() {
  return map(this.members(function(_arg) {
    var key, val;
    key = _arg[0], val = _arg[1];
    return val;
  }));
};

RegExps.prototype.initialise = function(_, flags) {
  var flag, _i, _len, _ref2, _results;
  this.flags = {};
  _ref2 = ['g', 'i', 'm', 'y'];
  _results = [];
  for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
    flag = _ref2[_i];
    _results.push(this.flags[flag] = __indexOf.call(flags, flag) >= 0);
  }
  return _results;
};

exports.NegatedConditional = (function(_super) {

  __extends(NegatedConditional, _super);

  function NegatedConditional() {
    return NegatedConditional.__super__.constructor.apply(this, arguments);
  }

  return NegatedConditional;

})(Conditional);

exports.NegatedWhile = (function(_super) {

  __extends(NegatedWhile, _super);

  function NegatedWhile() {
    return NegatedWhile.__super__.constructor.apply(this, arguments);
  }

  return NegatedWhile;

})(While);

exports.Loop = (function(_super) {

  __extends(Loop, _super);

  function Loop(block) {
    Loop.__super__.constructor.call(this, (new Bool(true)).g(), block);
  }

  return Loop;

})(While);
