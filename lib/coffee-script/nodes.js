// Generated by CoffeeScript 1.3.3
(function() {
  var assignOpToJSON, binOpToJSON, exports, primitiveToJSON, statementToJSON, unaryOpToJSON;

  exports = this;

  binOpToJSON = function() {
    return {
      nodeType: this.className,
      left: this.left.toJSON(),
      right: this.right.toJSON()
    };
  };

  unaryOpToJSON = function() {
    return {
      nodeType: this.className,
      expression: this.expr.toJSON()
    };
  };

  assignOpToJSON = function() {
    return {
      nodeType: this.className,
      assignee: this.assignee.toJSON(),
      expression: this.expr.toJSON()
    };
  };

  statementToJSON = function() {
    return {
      nodeType: this.className
    };
  };

  primitiveToJSON = function() {
    return {
      nodeType: this.className,
      data: this.data
    };
  };

  this.AddOp = (function() {

    AddOp.prototype.className = "AddOp";

    function AddOp(left, right) {
      this.left = left;
      this.right = right;
    }

    AddOp.prototype.toJSON = binOpToJSON;

    return AddOp;

  })();

  this.ArrayInitialiser = (function() {

    ArrayInitialiser.prototype.className = "ArrayInitialiser";

    function ArrayInitialiser(exprs) {
      this.exprs = exprs;
    }

    ArrayInitialiser.prototype.toJSON = function() {
      var e;
      return {
        nodeType: this.className,
        expressions: (function() {
          var _i, _len, _ref, _results;
          _ref = this.exprs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            _results.push(e.toJSON());
          }
          return _results;
        }).call(this)
      };
    };

    return ArrayInitialiser;

  })();

  this.AssignOp = (function() {

    AssignOp.prototype.className = "AssignOp";

    function AssignOp(assignee, expr) {
      this.assignee = assignee;
      this.expr = expr;
    }

    AssignOp.prototype.toJSON = assignOpToJSON;

    return AssignOp;

  })();

  this.BitAndOp = (function() {

    BitAndOp.prototype.className = "BitAndOp";

    function BitAndOp(left, right) {
      this.left = left;
      this.right = right;
    }

    BitAndOp.prototype.toJSON = binOpToJSON;

    return BitAndOp;

  })();

  this.BitNotOp = (function() {

    function BitNotOp(expr) {
      this.expr = expr;
    }

    BitNotOp.prototype.toJSON = unaryOpToJSON;

    return BitNotOp;

  })();

  this.BitOrOp = (function() {

    BitOrOp.prototype.className = "BitOrOp";

    function BitOrOp(left, right) {
      this.left = left;
      this.right = right;
    }

    BitOrOp.prototype.toJSON = binOpToJSON;

    return BitOrOp;

  })();

  this.BitXorOp = (function() {

    BitXorOp.prototype.className = "BitXorOp";

    function BitXorOp(left, right) {
      this.left = left;
      this.right = right;
    }

    BitXorOp.prototype.toJSON = binOpToJSON;

    return BitXorOp;

  })();

  this.Block = (function() {

    Block.prototype.className = "Block";

    function Block(statements) {
      this.statements = statements;
    }

    Block.prototype.toJSON = function() {
      var s;
      return {
        nodeType: this.className,
        statements: (function() {
          var _i, _len, _ref, _results;
          _ref = this.statements;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            _results.push(s.toJSON());
          }
          return _results;
        }).call(this)
      };
    };

    return Block;

  })();

  this.Bool = (function() {

    Bool.prototype.className = "Bool";

    function Bool(data) {
      this.data = data;
    }

    Bool.prototype.toJSON = primitiveToJSON;

    return Bool;

  })();

  this.BoundFunction = (function() {

    BoundFunction.prototype.className = "BoundFunction";

    function BoundFunction(parameters, block) {
      this.parameters = parameters;
      this.block = block;
    }

    BoundFunction.prototype.toJSON = function() {
      var p;
      return {
        nodeType: this.className,
        parameters: (function() {
          var _i, _len, _ref, _results;
          _ref = this.parameters;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(p.toJSON());
          }
          return _results;
        }).call(this),
        block: this.block.toJSON()
      };
    };

    return BoundFunction;

  })();

  this.Break = (function() {

    Break.prototype.className = "Break";

    function Break() {}

    Break.prototype.toJSON = statementToJSON;

    return Break;

  })();

  this.Class = (function() {

    Class.prototype.className = "Class";

    function Class(nameAssignment, parent, exprs) {
      this.nameAssignment = nameAssignment;
      this.parent = parent;
      this.exprs = exprs;
      this.name = (function() {
        if (this.nameAssignment != null) {
          switch (this.nameAssignment.className) {
            case "Identifier":
              return this.nameAssignment;
            case "MemberAccessOp":
            case "ProtoMemberAccessOp":
            case "SoakedMemberAccessOp":
            case "SoakedProtoMemberAccessOp":
              return this.nameAssignment.memberName;
            default:
              return null;
          }
        } else {
          return null;
        }
      }).call(this);
    }

    Class.prototype.toJSON = function() {
      var e, _ref, _ref1;
      return {
        nodeType: this.className,
        nameAssignment: (_ref = this.nameAssignment) != null ? _ref.toJSON() : void 0,
        name: this.name,
        parent: (_ref1 = this.parent) != null ? _ref1.toJSON() : void 0,
        expressions: (function() {
          var _i, _len, _ref2, _results;
          _ref2 = this.exprs;
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            e = _ref2[_i];
            _results.push(e.toJSON());
          }
          return _results;
        }).call(this)
      };
    };

    return Class;

  })();

  this.ClassProtoAssignOp = (function() {

    ClassProtoAssignOp.prototype.className = "ClassProtoAssignOp";

    function ClassProtoAssignOp(assignee, expr) {
      this.assignee = assignee;
      this.expr = expr;
    }

    ClassProtoAssignOp.prototype.toJSON = assignOpToJSON;

    return ClassProtoAssignOp;

  })();

  this.CompoundAssignOp = (function() {

    CompoundAssignOp.prototype.className = "CompoundAssignOp";

    function CompoundAssignOp(op, assignee, expr) {
      this.op = op;
      this.assignee = assignee;
      this.expr = expr;
    }

    CompoundAssignOp.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        op: this.op.prototype.className,
        assignee: this.assignee.toJSON(),
        expression: this.expr.toJSON()
      };
    };

    return CompoundAssignOp;

  })();

  this.ConcatOp = (function() {

    ConcatOp.prototype.className = "ConcatOp";

    function ConcatOp(left, right) {
      this.left = left;
      this.right = right;
    }

    ConcatOp.prototype.toJSON = binOpToJSON;

    return ConcatOp;

  })();

  this.Conditional = (function() {

    Conditional.prototype.className = "Conditional";

    function Conditional(condition, block, elseBlock) {
      this.condition = condition;
      this.block = block;
      this.elseBlock = elseBlock;
    }

    Conditional.prototype.toJSON = function() {
      var _ref;
      return {
        nodeType: this.className,
        block: this.block.toJSON(),
        elseBlock: (_ref = this.elseBlock) != null ? _ref.toJSON() : void 0
      };
    };

    return Conditional;

  })();

  this.Continue = (function() {

    Continue.prototype.className = "Continue";

    function Continue() {}

    Continue.prototype.toJSON = statementToJSON;

    return Continue;

  })();

  this.DeleteOp = (function() {

    DeleteOp.prototype.className = "DeleteOp";

    function DeleteOp(expr) {
      this.expr = expr;
    }

    DeleteOp.prototype.toJSON = unaryOpToJSON;

    return DeleteOp;

  })();

  this.DivideOp = (function() {

    DivideOp.prototype.className = "DivideOp";

    function DivideOp(left, right) {
      this.left = left;
      this.right = right;
    }

    DivideOp.prototype.toJSON = binOpToJSON;

    return DivideOp;

  })();

  this.DoOp = (function() {

    DoOp.prototype.className = "DoOp";

    function DoOp(expr) {
      this.expr = expr;
    }

    DoOp.prototype.toJSON = unaryOpToJSON;

    return DoOp;

  })();

  this.DynamicMemberAccessOp = (function() {

    DynamicMemberAccessOp.prototype.className = "DynamicMemberAccessOp";

    function DynamicMemberAccessOp(expr, indexingExpr) {
      this.expr = expr;
      this.indexingExpr = indexingExpr;
    }

    DynamicMemberAccessOp.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        expression: this.expr.toJSON(),
        indexingExpression: this.indexingExpr.toJSON()
      };
    };

    return DynamicMemberAccessOp;

  })();

  this.DynamicProtoMemberAccessOp = (function() {

    DynamicProtoMemberAccessOp.prototype.className = "DynamicProtoMemberAccessOp";

    function DynamicProtoMemberAccessOp(expr, indexingExpr) {
      this.expr = expr;
      this.indexingExpr = indexingExpr;
    }

    DynamicProtoMemberAccessOp.prototype.toJSON = exports.DynamicMemberAccessOp.prototype.toJSON;

    return DynamicProtoMemberAccessOp;

  })();

  this.EQOp = (function() {

    EQOp.prototype.className = "EQOp";

    function EQOp(left, right) {
      this.left = left;
      this.right = right;
    }

    EQOp.prototype.toJSON = binOpToJSON;

    return EQOp;

  })();

  this.ExclusiveRange = (function() {

    ExclusiveRange.prototype.className = "ExclusiveRange";

    function ExclusiveRange(from, til) {
      this.from = from;
      this.til = til;
    }

    ExclusiveRange.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        from: this.from.toJSON(),
        til: this.til.toJSON()
      };
    };

    return ExclusiveRange;

  })();

  this.ExclusiveSlice = (function() {

    ExclusiveSlice.prototype.className = "ExclusiveSlice";

    function ExclusiveSlice(expr, from, til) {
      this.expr = expr;
      this.from = from;
      this.til = til;
    }

    ExclusiveSlice.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        expression: this.expr.toJSON(),
        from: this.from.toJSON(),
        til: this.til.toJSON()
      };
    };

    return ExclusiveSlice;

  })();

  this.ExistsAssignOp = (function() {

    ExistsAssignOp.prototype.className = "ExistsAssignOp";

    function ExistsAssignOp(assignee, expr) {
      this.assignee = assignee;
      this.expr = expr;
    }

    ExistsAssignOp.prototype.toJSON = assignOpToJSON;

    return ExistsAssignOp;

  })();

  this.ExistsOp = (function() {

    ExistsOp.prototype.className = "ExistsOp";

    function ExistsOp(left, right) {
      this.left = left;
      this.right = right;
    }

    ExistsOp.prototype.toJSON = binOpToJSON;

    return ExistsOp;

  })();

  this.ExtendsOp = (function() {

    ExtendsOp.prototype.className = "ExtendsOp";

    function ExtendsOp(left, right) {
      this.left = left;
      this.right = right;
    }

    ExtendsOp.prototype.toJSON = binOpToJSON;

    return ExtendsOp;

  })();

  this.Float = (function() {

    Float.prototype.className = "Float";

    function Float(data) {
      this.data = data;
    }

    Float.prototype.toJSON = primitiveToJSON;

    return Float;

  })();

  this.ForIn = (function() {

    ForIn.prototype.className = "ForIn";

    function ForIn(valAssignee, keyAssignee, expr, filterExpr, block) {
      this.valAssignee = valAssignee;
      this.keyAssignee = keyAssignee;
      this.expr = expr;
      this.filterExpr = filterExpr;
      this.block = block;
    }

    ForIn.prototype.toJSON = function() {
      var _ref;
      return {
        nodeType: this.className,
        valAssignee: this.valAssignee.toJSON(),
        keyAssignee: (_ref = this.keyAssignee) != null ? _ref.toJSON() : void 0,
        expression: this.expr.toJSON(),
        filterExpression: this.filterExp.toJSON(),
        block: this.block.toJSON()
      };
    };

    return ForIn;

  })();

  this.ForOf = (function() {

    ForOf.prototype.className = "ForOf";

    function ForOf(isOwn, keyAssignee, valAssignee, expr, filterExpr, block) {
      this.isOwn = isOwn;
      this.keyAssignee = keyAssignee;
      this.valAssignee = valAssignee;
      this.expr = expr;
      this.filterExpr = filterExpr;
      this.block = block;
    }

    ForOf.prototype.toJSON = function() {
      var _ref;
      return {
        nodeType: this.className,
        isOwn: this.isOwn,
        keyAssignee: this.keyAssignee.toJSON(),
        valAssignee: (_ref = this.valAssignee) != null ? _ref.toJSON() : void 0,
        expression: this.expr.toJSON(),
        filterExpression: this.filterExp.toJSON(),
        block: this.block.toJSON()
      };
    };

    return ForOf;

  })();

  this.Function = (function() {

    Function.prototype.className = "Function";

    function Function(parameters, block) {
      this.parameters = parameters;
      this.block = block;
    }

    Function.prototype.toJSON = function() {
      var p;
      return {
        nodeType: this.className,
        parameters: (function() {
          var _i, _len, _ref, _results;
          _ref = this.parameters;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(p.toJSON());
          }
          return _results;
        }).call(this),
        block: this.block.toJSON()
      };
    };

    return Function;

  })();

  this.FunctionApplication = (function() {

    FunctionApplication.prototype.className = "FunctionApplication";

    function FunctionApplication(_function, _arguments) {
      this["function"] = _function;
      this["arguments"] = _arguments;
    }

    FunctionApplication.prototype.toJSON = function() {
      var a;
      return {
        nodeType: this.className,
        "function": this["function"].toJSON(),
        "arguments": (function() {
          var _i, _len, _ref, _results;
          _ref = this["arguments"];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            a = _ref[_i];
            _results.push(a.toJSON());
          }
          return _results;
        }).call(this)
      };
    };

    return FunctionApplication;

  })();

  this.GTEOp = (function() {

    GTEOp.prototype.className = "GTEOp";

    function GTEOp(left, right) {
      this.left = left;
      this.right = right;
    }

    GTEOp.prototype.toJSON = binOpToJSON;

    return GTEOp;

  })();

  this.GTOp = (function() {

    GTOp.prototype.className = "GTOp";

    function GTOp(left, right) {
      this.left = left;
      this.right = right;
    }

    GTOp.prototype.toJSON = binOpToJSON;

    return GTOp;

  })();

  this.Identifier = (function() {

    Identifier.prototype.className = "Identifier";

    function Identifier(data) {
      this.data = data;
    }

    Identifier.prototype.toJSON = primitiveToJSON;

    return Identifier;

  })();

  this.InOp = (function() {

    InOp.prototype.className = "InOp";

    function InOp(left, right) {
      this.left = left;
      this.right = right;
    }

    InOp.prototype.toJSON = binOpToJSON;

    return InOp;

  })();

  this.InclusiveRange = (function() {

    InclusiveRange.prototype.className = "InclusiveRange";

    function InclusiveRange(from, to) {
      this.from = from;
      this.to = to;
    }

    InclusiveRange.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        from: this.from.toJSON(),
        to: this.to.toJSON()
      };
    };

    return InclusiveRange;

  })();

  this.InclusiveSlice = (function() {

    InclusiveSlice.prototype.className = "InclusiveSlice";

    function InclusiveSlice(expr, from, to) {
      this.expr = expr;
      this.from = from;
      this.to = to;
    }

    InclusiveSlice.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        expression: this.expression.toJSON(),
        from: this.from.toJSON(),
        to: this.to.toJSON()
      };
    };

    return InclusiveSlice;

  })();

  this.InstanceofOp = (function() {

    InstanceofOp.prototype.className = "InstanceofOp";

    function InstanceofOp(left, right) {
      this.left = left;
      this.right = right;
    }

    InstanceofOp.prototype.toJSON = binOpToJSON;

    return InstanceofOp;

  })();

  this.Int = (function() {

    Int.prototype.className = "Int";

    function Int(data) {
      this.data = data;
    }

    Int.prototype.toJSON = primitiveToJSON;

    return Int;

  })();

  this.JavaScript = (function() {

    JavaScript.prototype.className = "JavaScript";

    function JavaScript(data) {
      this.data = data;
    }

    JavaScript.prototype.toJSON = primitiveToJSON;

    return JavaScript;

  })();

  this.LTEOp = (function() {

    LTEOp.prototype.className = "LTEOp";

    function LTEOp(left, right) {
      this.left = left;
      this.right = right;
    }

    LTEOp.prototype.toJSON = binOpToJSON;

    return LTEOp;

  })();

  this.LTOp = (function() {

    LTOp.prototype.className = "LTOp";

    function LTOp(left, right) {
      this.left = left;
      this.right = right;
    }

    LTOp.prototype.toJSON = binOpToJSON;

    return LTOp;

  })();

  this.LeftShiftOp = (function() {

    LeftShiftOp.prototype.className = "LeftShiftOp";

    function LeftShiftOp(left, right) {
      this.left = left;
      this.right = right;
    }

    LeftShiftOp.prototype.toJSON = binOpToJSON;

    return LeftShiftOp;

  })();

  this.LogicalAndOp = (function() {

    LogicalAndOp.prototype.className = "LogicalAndOp";

    function LogicalAndOp(left, right) {
      this.left = left;
      this.right = right;
    }

    LogicalAndOp.prototype.toJSON = binOpToJSON;

    return LogicalAndOp;

  })();

  this.LogicalNotOp = (function() {

    LogicalNotOp.prototype.className = "LogicalNotOp";

    function LogicalNotOp(expr) {
      this.expr = expr;
    }

    LogicalNotOp.prototype.toJSON = unaryOpToJSON;

    return LogicalNotOp;

  })();

  this.LogicalOrOp = (function() {

    LogicalOrOp.prototype.className = "LogicalOrOp";

    function LogicalOrOp(left, right) {
      this.left = left;
      this.right = right;
    }

    LogicalOrOp.prototype.toJSON = binOpToJSON;

    return LogicalOrOp;

  })();

  this.MemberAccessOp = (function() {

    MemberAccessOp.prototype.className = "MemberAccessOp";

    function MemberAccessOp(expr, memberName) {
      this.expr = expr;
      this.memberName = memberName;
    }

    MemberAccessOp.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        expression: this.expr.toJSON(),
        memberName: this.memberName.toJSON()
      };
    };

    return MemberAccessOp;

  })();

  this.MultiplyOp = (function() {

    MultiplyOp.prototype.className = "MultiplyOp";

    function MultiplyOp(left, right) {
      this.left = left;
      this.right = right;
    }

    MultiplyOp.prototype.toJSON = binOpToJSON;

    return MultiplyOp;

  })();

  this.NEQOp = (function() {

    NEQOp.prototype.className = "NEQOp";

    function NEQOp(left, right) {
      this.left = left;
      this.right = right;
    }

    NEQOp.prototype.toJSON = binOpToJSON;

    return NEQOp;

  })();

  this.NewOp = (function() {

    NewOp.prototype.className = "NewOp";

    function NewOp(expr) {
      this.expr = expr;
    }

    NewOp.prototype.toJSON = unaryOpToJSON;

    return NewOp;

  })();

  this.Null = (function() {

    Null.prototype.className = "Null";

    function Null() {}

    Null.prototype.toJSON = statementToJSON;

    return Null;

  })();

  this.ObjectInitialiser = (function() {

    ObjectInitialiser.prototype.className = "ObjectInitialiser";

    function ObjectInitialiser(assignments) {
      this.assignments = assignments;
    }

    ObjectInitialiser.prototype.toJSON = function() {
      var expr, key;
      return {
        nodeType: this.className,
        assignments: (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = this.assignments;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], key = _ref1[0], expr = _ref1[1];
            _results.push([key.toJSON(), expr.toJSON()]);
          }
          return _results;
        }).call(this)
      };
    };

    return ObjectInitialiser;

  })();

  this.OfOp = (function() {

    OfOp.prototype.className = "OfOp";

    function OfOp(left, right) {
      this.left = left;
      this.right = right;
    }

    OfOp.prototype.toJSON = binOpToJSON;

    return OfOp;

  })();

  this.PreDecrementOp = (function() {

    PreDecrementOp.prototype.className = "PreDecrementOp";

    function PreDecrementOp(expr) {
      this.expr = expr;
    }

    PreDecrementOp.prototype.toJSON = unaryOpToJSON;

    return PreDecrementOp;

  })();

  this.PreIncrementOp = (function() {

    PreIncrementOp.prototype.className = "PreIncrementOp";

    function PreIncrementOp(expr) {
      this.expr = expr;
    }

    PreIncrementOp.prototype.toJSON = unaryOpToJSON;

    return PreIncrementOp;

  })();

  this.PostDecrementOp = (function() {

    PostDecrementOp.prototype.className = "PostDecrementOp";

    function PostDecrementOp(expr) {
      this.expr = expr;
    }

    PostDecrementOp.prototype.toJSON = unaryOpToJSON;

    return PostDecrementOp;

  })();

  this.PostIncrementOp = (function() {

    PostIncrementOp.prototype.className = "PostIncrementOp";

    function PostIncrementOp(expr) {
      this.expr = expr;
    }

    PostIncrementOp.prototype.toJSON = unaryOpToJSON;

    return PostIncrementOp;

  })();

  this.Program = (function() {

    Program.prototype.className = "Program";

    function Program(block) {
      this.block = block;
    }

    Program.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        block: this.block.toJSON()
      };
    };

    return Program;

  })();

  this.ProtoMemberAccessOp = (function() {

    ProtoMemberAccessOp.prototype.className = "ProtoMemberAccessOp";

    function ProtoMemberAccessOp(expr, memberName) {
      this.expr = expr;
      this.memberName = memberName;
    }

    ProtoMemberAccessOp.prototype.toJSON = exports.MemberAccessOp.prototype.toJSON;

    return ProtoMemberAccessOp;

  })();

  this.Regexp = (function() {

    Regexp.prototype.className = "Regexp";

    function Regexp(data) {
      this.data = data;
    }

    Regexp.prototype.toJSON = primitiveToJSON;

    return Regexp;

  })();

  this.RemOp = (function() {

    RemOp.prototype.className = "RemOp";

    function RemOp(left, right) {
      this.left = left;
      this.right = right;
    }

    RemOp.prototype.toJSON = binOpToJSON;

    return RemOp;

  })();

  this.Rest = (function() {

    Rest.prototype.className = "Rest";

    function Rest(expr) {
      this.expr = expr;
    }

    Rest.prototype.toJSON = unaryOpToJSON;

    return Rest;

  })();

  this.Return = (function() {

    Return.prototype.className = "Return";

    function Return(expr) {
      this.expr = expr;
    }

    Return.prototype.toJSON = unaryOpToJSON;

    return Return;

  })();

  this.SeqOp = (function() {

    SeqOp.prototype.className = "SeqOp";

    function SeqOp(left, right) {
      this.left = left;
      this.right = right;
    }

    SeqOp.prototype.toJSON = binOpToJSON;

    return SeqOp;

  })();

  this.ShallowCopyArray = (function() {

    ShallowCopyArray.prototype.className = "ShallowCopyArray";

    function ShallowCopyArray(expr) {
      this.expr = expr;
    }

    ShallowCopyArray.prototype.toJSON = unaryOpToJSON;

    return ShallowCopyArray;

  })();

  this.SignedRightShiftOp = (function() {

    SignedRightShiftOp.prototype.className = "SignedRightShiftOp";

    function SignedRightShiftOp(left, right) {
      this.left = left;
      this.right = right;
    }

    SignedRightShiftOp.prototype.toJSON = binOpToJSON;

    return SignedRightShiftOp;

  })();

  this.SoakedDynamicMemberAccessOp = (function() {

    SoakedDynamicMemberAccessOp.prototype.className = "SoakedDynamicMemberAccessOp";

    function SoakedDynamicMemberAccessOp(expr, indexingExpr) {
      this.expr = expr;
      this.indexingExpr = indexingExpr;
    }

    SoakedDynamicMemberAccessOp.prototype.toJSON = exports.DynamicMemberAccessOp.prototype.toJSON;

    return SoakedDynamicMemberAccessOp;

  })();

  this.SoakedDynamicProtoMemberAccessOp = (function() {

    SoakedDynamicProtoMemberAccessOp.prototype.className = "SoakedDynamicProtoMemberAccessOp";

    function SoakedDynamicProtoMemberAccessOp(expr, indexingExpr) {
      this.expr = expr;
      this.indexingExpr = indexingExpr;
    }

    SoakedDynamicProtoMemberAccessOp.prototype.toJSON = exports.DynamicMemberAccessOp.prototype.toJSON;

    return SoakedDynamicProtoMemberAccessOp;

  })();

  this.SoakedFunctionApplication = (function() {

    SoakedFunctionApplication.prototype.className = "SoakedFunctionApplication";

    function SoakedFunctionApplication(_function, _arguments) {
      this["function"] = _function;
      this["arguments"] = _arguments;
    }

    SoakedFunctionApplication.prototype.toJSON = exports.FunctionApplication.prototype.toJSON;

    return SoakedFunctionApplication;

  })();

  this.SoakedMemberAccessOp = (function() {

    SoakedMemberAccessOp.prototype.className = "SoakedMemberAccessOp";

    function SoakedMemberAccessOp(expr, memberName) {
      this.expr = expr;
      this.memberName = memberName;
    }

    SoakedMemberAccessOp.prototype.toJSON = exports.MemberAccessOp.prototype.toJSON;

    return SoakedMemberAccessOp;

  })();

  this.SoakedProtoMemberAccessOp = (function() {

    SoakedProtoMemberAccessOp.prototype.className = "SoakedProtoMemberAccessOp";

    function SoakedProtoMemberAccessOp(expr, memberName) {
      this.expr = expr;
      this.memberName = memberName;
    }

    SoakedProtoMemberAccessOp.prototype.toJSON = exports.MemberAccessOp.prototype.toJSON;

    return SoakedProtoMemberAccessOp;

  })();

  this.Splice = (function() {

    Splice.prototype.className = "Splice";

    function Splice(slice, expr) {
      this.slice = slice;
      this.expr = expr;
    }

    Splice.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        slice: this.slice.toJSON(),
        expression: this.expr.toJSON()
      };
    };

    return Splice;

  })();

  this.Spread = (function() {

    Spread.prototype.className = "Spread";

    function Spread(expr) {
      this.expr = expr;
    }

    Spread.prototype.toJSON = unaryOpToJSON;

    return Spread;

  })();

  this.String = (function() {

    String.prototype.className = "String";

    function String(data) {
      this.data = data;
    }

    String.prototype.toJSON = primitiveToJSON;

    return String;

  })();

  this.SubtractOp = (function() {

    SubtractOp.prototype.className = "SubtractOp";

    function SubtractOp(left, right) {
      this.left = left;
      this.right = right;
    }

    SubtractOp.prototype.toJSON = binOpToJSON;

    return SubtractOp;

  })();

  this.Super = (function() {

    Super.prototype.className = "Super";

    function Super(_arguments) {
      this["arguments"] = _arguments;
    }

    Super.prototype.toJSON = function() {
      var a;
      return {
        nodeType: this.className,
        "arguments": (function() {
          var _i, _len, _ref, _results;
          _ref = this["arguments"];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            a = _ref[_i];
            _results.push(a.toJSON());
          }
          return _results;
        }).call(this)
      };
    };

    return Super;

  })();

  this.Switch = (function() {

    Switch.prototype.className = "Switch";

    function Switch(expr, cases, elseBlock) {
      this.expr = expr;
      this.cases = cases;
      this.elseBlock = elseBlock;
    }

    Switch.prototype.toJSON = function() {
      var block, expr, _ref;
      return {
        nodeType: this.className,
        expression: this.expr.toJSON(),
        cases: (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = this.cases;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], expr = _ref1[0], block = _ref1[1];
            _results.push([expr.toJSON(), block.toJSON()]);
          }
          return _results;
        }).call(this),
        elseBlock: (_ref = this.elseBlock) != null ? _ref.toJSON() : void 0
      };
    };

    return Switch;

  })();

  this.Throw = (function() {

    Throw.prototype.className = "Throw";

    function Throw(expr) {
      this.expr = expr;
    }

    Throw.prototype.toJSON = unaryOpToJSON;

    return Throw;

  })();

  this.Try = (function() {

    Try.prototype.className = "Try";

    function Try(block, catchAssignee, catchBlock, finallyBlock) {
      this.block = block;
      this.catchAssignee = catchAssignee;
      this.catchBlock = catchBlock;
      this.finallyBlock = finallyBlock;
    }

    Try.prototype.toJSON = function() {
      var _ref, _ref1, _ref2;
      return {
        nodeType: this.className,
        block: this.block.toJSON(),
        catchAssignee: (_ref = this.catchAssignee) != null ? _ref.toJSON() : void 0,
        catchBlock: (_ref1 = this.catchBlock) != null ? _ref1.toJSON() : void 0,
        finallyBlock: (_ref2 = this.finallyBlock) != null ? _ref2.toJSON() : void 0
      };
    };

    return Try;

  })();

  this.TypeofOp = (function() {

    TypeofOp.prototype.className = "TypeofOp";

    function TypeofOp(expr) {
      this.expr = expr;
    }

    TypeofOp.prototype.toJSON = unaryOpToJSON;

    return TypeofOp;

  })();

  this.UnaryExistsOp = (function() {

    UnaryExistsOp.prototype.className = "UnaryExistsOp";

    function UnaryExistsOp(expr) {
      this.expr = expr;
    }

    UnaryExistsOp.prototype.toJSON = unaryOpToJSON;

    return UnaryExistsOp;

  })();

  this.UnaryNegateOp = (function() {

    UnaryNegateOp.prototype.className = "UnaryNegateOp";

    function UnaryNegateOp(expr) {
      this.expr = expr;
    }

    UnaryNegateOp.prototype.toJSON = unaryOpToJSON;

    return UnaryNegateOp;

  })();

  this.UnaryPlusOp = (function() {

    UnaryPlusOp.prototype.className = "UnaryPlusOp";

    function UnaryPlusOp(expr) {
      this.expr = expr;
    }

    UnaryPlusOp.prototype.toJSON = unaryOpToJSON;

    return UnaryPlusOp;

  })();

  this.UnboundedLeftSlice = (function() {

    UnboundedLeftSlice.prototype.className = "UnboundedLeftSlice";

    function UnboundedLeftSlice(expr, til) {
      this.expr = expr;
      this.til = til;
    }

    UnboundedLeftSlice.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        expression: this.expr.toJSON(),
        til: this.til.toJSON()
      };
    };

    return UnboundedLeftSlice;

  })();

  this.UnboundedRightSlice = (function() {

    UnboundedRightSlice.prototype.className = "UnboundedRightSlice";

    function UnboundedRightSlice(expr, from) {
      this.expr = expr;
      this.from = from;
    }

    UnboundedRightSlice.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        expression: this.expr.toJSON(),
        from: this.from.toJSON()
      };
    };

    return UnboundedRightSlice;

  })();

  this.Undefined = (function() {

    Undefined.prototype.className = "Undefined";

    function Undefined() {}

    Undefined.prototype.toJSON = statementToJSON;

    return Undefined;

  })();

  this.UnsignedRightShiftOp = (function() {

    UnsignedRightShiftOp.prototype.className = "UnsignedRightShiftOp";

    function UnsignedRightShiftOp(left, right) {
      this.left = left;
      this.right = right;
    }

    UnsignedRightShiftOp.prototype.toJSON = binOpToJSON;

    return UnsignedRightShiftOp;

  })();

  this.While = (function() {

    While.prototype.className = "While";

    function While(condition, block) {
      this.condition = condition;
      this.block = block;
    }

    While.prototype.toJSON = function() {
      return {
        nodeType: this.className,
        condition: this.condition.toJSON(),
        block: this.block.toJSON()
      };
    };

    return While;

  })();

}).call(this);
